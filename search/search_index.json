{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hyperlinked Twin","text":"<p>This website is a hyperlinked twin of a Spoofax language project code repository. The website navigation hierarchy corresponds to the repository file hierarchy, and the code displayed on each page is a verbatim copy of the raw code in the corresponding file.</p> <p>Hyperlinked twins support precise name-based code navigation online in ordinary web browsers:</p> <ul> <li>Simply click on a name reference to jump to the first declaration of the name.</li> <li>Click on a declaration to display a modal with links to all the references to the declaration.<sup>1</sup></li> </ul> <p>The sources of the webpages were generated using Spoofax from the analysed language project. The hyperlinks added to names were generated from the name binding analysis used by Spoofax, and the syntax highlighting corresponds closely to that displayed when browsing files in Spoofax.</p> <p>The aim is for a future release of Spoofax to support generation of hyperlinked twin websites with code in all Spoofax meta-languages.</p> <ol> <li> <p>When there is only one reference to a declaration, \u200b    clicking on the declaration jumps directly to the reference. \u200b    When there are no references to a declaration, \u200b    clicking on it has no effect.\u00a0\u21a9</p> </li> </ol>"},{"location":"lang.java/","title":"Java Front","text":"<p> [pdmosses/java-front/README]</p> <p>A declarative specification of Java 8's syntax in Spoofax.</p>"},{"location":"lang.java/#syntax","title":"Syntax","text":"<p><code>metaborg-java.sdf3</code></p> <p>This example demonstrates generation of a hyperlinked twin from an SDF3 definition of the syntax of a major programming language.</p>"},{"location":"lang.java/#name-binding","title":"Name binding","text":"<p>The name binding of Java has not yet been specified in Spoofax meta-languages.</p>"},{"location":"lang.java/#project-structure","title":"Project Structure","text":"<p>Each subdirectory of <code>syntax/java</code> contains specifications for a section of the Java language:</p> <ul> <li>arrays  - Syntax for array initializers</li> <li>classes - Class, method, constructor, field and enum declarations</li> <li>expressions - All expressions</li> <li>interfaces - Interface, abstract method, constant and annotation declarations</li> <li>lexical - Lexical syntax for identifiers, comments, layout, etc.</li> <li>literals - Boolean, numerical, string, and null literals</li> <li>names - References to definitions of names</li> <li>packages - Compilation unit, package, and import declarations</li> <li>statements - All statements</li> <li>types - Primitive and reference types</li> </ul> <p>The project also contains tests with Java files from the Spoofax codebase, and succeeding tests from the Java language specification.</p>"},{"location":"lang.java/src-gen/syntax/permissive-water.sdf3/","title":"<code>permissive-water.sdf3</code>","text":"<pre><code>module permissive-water\n\n// Key idea: WATER is the inverse of LAYOUT\n\ncontext-free syntax\n  // Allow WATER on places where LAYOUT may occur\n  LAYOUT.WATER = WATER\n\nlexical sorts\n  WATER\n  WATERTOKEN\n  WATERTOKENSTART\n  WATERTOKENSEPARATOR\n\nlexical syntax\n  // Separate water regions into smaller chunks for recovery costs calculation\n  WATER = WATERTOKEN\n  WATER = WATERTOKENSEPARATOR\n\n  // Allow to skip over identifier strings\n  WATERTOKEN      = WATERTOKENSTART [A-Za-z0-9\\_]*\n  WATERTOKENSTART = [A-Za-z0-9\\_] {recover}\n\n  // Allow to skip over special characters that are neither part of identifiers nor whitespace characters\n  WATERTOKENSEPARATOR = ~[A-Za-z0-9\\_\\ \\t\\12\\r\\n\\*] {recover}\n\nlexical restrictions\n  WATERTOKEN -/- [A-Za-z0-9\\_]\n</code></pre> \u00d7"},{"location":"lang.java/src-gen/syntax/permissive-water.sdf3/#modal-h2","title":"permissive-water.sdf3","text":""},{"location":"lang.java/syntax/Java_StrategoMix.sdf3/","title":"<code>Java_StrategoMix.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/Java_StrategoMix.sdf3</p> <pre><code>module Java_StrategoMix\n\nimports\n  java/packages/CompilationUnits\n\n  StrategoLang/import-namespaced\n  StrategoLang/sugar/terms-namespaced\n  StrategoLang/core/identifiers-namespaced\n\ncontext-free start-symbols\n\n  Module\n\ncontext-free syntax\n\n  Module = StrategoLang-Module\n\n///\n// Quotations for CompilationUnit\n///\ncontext-free syntax\n  StrategoLang-Term.ToMetaExpr = \"java:compilation-unit\" \"|[\" CompilationUnit \"]|\"\n  StrategoLang-Term.ToMetaExpr =      \"compilation-unit\" \"|[\" CompilationUnit \"]|\"\n  StrategoLang-Term.ToMetaExpr = \"java\"                  \"|[\" CompilationUnit \"]|\"\n  StrategoLang-Term.ToMetaExpr =                         \"|[\" CompilationUnit \"]|\"\n\n///\n// Variables for Formal Parameters\n///\nvariables\n  FormalParam  = \"param\"         [0-9]*     {prefer}\n  FormalParam  = \"param_\"  [a-zA-Z0-9]*     {prefer}\n  FormalParams = \"params\"        [0-9]*     {prefer}\n  FormalParams = \"params_\" [a-zA-Z0-9]*     {prefer}\n  FormalParams = \"param\"         [0-9]* \"*\" {prefer}\n  FormalParams = \"param_\"  [a-zA-Z0-9]* \"*\" {prefer}\n\n///\n// Quotations for Formal Parameters\n///\ncontext-free syntax\n  StrategoLang-Term.ToMetaExpr =             \"param\"  \"|[\" FormalParam \"]|\"\n  StrategoLang-Term.ToMetaExpr =        \"java:param\"  \"|[\" FormalParam \"]|\"\n\n  StrategoLang-Term.ToMetaExpr =             \"param*\" \"|[\" {FormalParam \",\"}* \"]|\"\n  StrategoLang-Term.ToMetaExpr =        \"java:param*\" \"|[\" {FormalParam \",\"}* \"]|\"\n\n  StrategoLang-Term.ToMetaExpr =  \"java:formal-param\" \"|[\" FormalParam \"]|\"\n  StrategoLang-Term.ToMetaExpr =       \"formal-param\" \"|[\" FormalParam \"]|\"\n  StrategoLang-Term.ToMetaExpr =  \"java\"              \"|[\" FormalParam \"]|\"\n  StrategoLang-Term.ToMetaExpr =                      \"|[\" FormalParam \"]|\"\n\n  StrategoLang-Term.ToMetaExpr = \"java:formal-param*\" \"|[\" {FormalParam \",\"}* \"]|\"\n  StrategoLang-Term.ToMetaExpr =      \"formal-param*\" \"|[\" {FormalParam \",\"}* \"]|\"\n  StrategoLang-Term.ToMetaExpr = \"java\"               \"|[\" {FormalParam \",\"}* \"]|\"\n  StrategoLang-Term.ToMetaExpr =                      \"|[\" {FormalParam \",\"}* \"]|\"\n\n///\n// Anti Quotations for Formal Parameters\n///\ncontext-free syntax\n   FormalParam.FromMetaExpr       = \"~\"  StrategoLang-Term\n  {FormalParam \",\"}*.FromMetaExpr = \"~*\" StrategoLang-Term\n\n///\n// Anti-Quotation for Types\n///\ncontext-free syntax\n  StrategoLang-Term.ToMetaExpr =         \"t\" \"|[\" UnannType \"]|\"\n  StrategoLang-Term.ToMetaExpr =        \"ty\" \"|[\" UnannType \"]|\"\n\n  StrategoLang-Term.ToMetaExpr = \"java:type\" \"|[\" UnannType \"]|\"\n  StrategoLang-Term.ToMetaExpr =      \"type\" \"|[\" UnannType \"]|\"\n  StrategoLang-Term.ToMetaExpr = \"java\"      \"|[\" UnannType \"]|\"\n  StrategoLang-Term.ToMetaExpr =             \"|[\" UnannType \"]|\"\n  StrategoLang-Term.ToMetaExpr =     \"rtype\" \"|[\" ReferenceType \"]|\"\n\n///\n// Anti-Quotation for Types\n///\ncontext-free syntax\n  UnannType.FromMetaExpr     = \"~\"        StrategoLang-Term\n  UnannType.FromMetaExpr     = \"~type:\"   StrategoLang-Term\n\n  ReferenceType.FromMetaExpr = \"~refType\" StrategoLang-Term\n  ReferenceType.FromMetaExpr = \"~rtype:\"  StrategoLang-Term\n\n///\n// Variables for Types\n///\nvariables\n  UnannType     = MetaTypeVar {prefer}\n  PrimitiveType = MetaPrimTypeVar {prefer}\n  ReferenceType = MetaReferenceTypeVar {prefer}\n\nlexical syntax\n  MetaTypeVar          = \"t\"         [0-9\\']*\n  MetaTypeVar          = \"t_\"  [a-zA-Z0-9\\']*\n  MetaTypeVar          = \"ty\"        [0-9\\']*\n  MetaTypeVar          = \"ty_\" [a-zA-Z0-9\\']*\n\n  MetaPrimTypeVar      = \"primt\"         [0-9\\']*\n  MetaPrimTypeVar      = \"primt_\"  [a-zA-Z0-9\\']*\n  MetaPrimTypeVar      = \"primty\"        [0-9\\']*\n  MetaPrimTypeVar      = \"primty_\" [a-zA-Z0-9\\']*\n\n  MetaReferenceTypeVar = \"rt\"         [0-9\\']*\n  MetaReferenceTypeVar = \"rt_\"  [a-zA-Z0-9\\']*\n  MetaReferenceTypeVar = \"rty\"        [0-9\\']*\n  MetaReferenceTypeVar = \"rty_\" [a-zA-Z0-9\\']*\n\n  ID = \"t\"         [0-9\\']* {reject}\n  ID = \"t_\"  [a-zA-Z0-9\\']* {reject}\n  ID = \"ty\"        [0-9\\']* {reject}\n  ID = \"ty_\" [a-zA-Z0-9\\']* {reject}\n\n  ID = \"primt\"         [0-9\\']* {reject}\n  ID = \"primt_\"  [a-zA-Z0-9\\']* {reject}\n  ID = \"primty\"        [0-9\\']* {reject}\n  ID = \"primty_\" [a-zA-Z0-9\\']* {reject}\n\n  ID = \"rt\"         [0-9\\']* {reject}\n  ID = \"rt_\"  [a-zA-Z0-9\\']* {reject}\n  ID = \"rty\"        [0-9\\']* {reject}\n  ID = \"rty_\" [a-zA-Z0-9\\']* {reject}\n\nlexical restrictions\n  MetaTypeVar          -/- [a-zA-Z0-9\\_\\$\\']\n  MetaPrimTypeVar      -/- [a-zA-Z0-9\\_\\$\\']\n  MetaReferenceTypeVar -/- [a-zA-Z0-9\\_\\$\\']\n\n///\n// Quotations for Statements\n///\ncontext-free syntax\n  StrategoLang-Term.ToMetaExpr     =        \"java:bstm\"  \"|[\" BlockStatement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =             \"bstm\"  \"|[\" BlockStatement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =        \"java\"       \"|[\" BlockStatement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =                     \"|[\" BlockStatement \"]|\"\n\n  StrategoLang-Term.ToMetaListExpr =        \"java:bstm*\" \"|[\" BlockStatement* \"]|\"\n  StrategoLang-Term.ToMetaListExpr =             \"bstm*\" \"|[\" BlockStatement* \"]|\"\n\n  StrategoLang-Term.ToMetaExpr     =   \"java:block-stm\"  \"|[\" BlockStatement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =        \"block-stm\"  \"|[\" BlockStatement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =   \"java\"            \"|[\" BlockStatement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =                     \"|[\" BlockStatement \"]|\"\n\n  StrategoLang-Term.ToMetaListExpr =   \"java:block-stm*\" \"|[\" BlockStatement* \"]|\"\n  StrategoLang-Term.ToMetaListExpr =        \"block-stm*\" \"|[\" BlockStatement* \"]|\"\n\n\n  StrategoLang-Term.ToMetaExpr     =         \"java:stm\"  \"|[\" Statement \"]|\"\n  StrategoLang-Term.ToMetaExpr     =              \"stm\"  \"|[\" Statement \"]|\"\n\n  StrategoLang-Term.ToMetaListExpr =      \"switch-group\" \"|[\" SwitchGroup \"]|\"\n  StrategoLang-Term.ToMetaListExpr = \"java:switch-group\" \"|[\" SwitchGroup \"]|\"\n\n///\n// Anti Quotations for Statements\n///\ncontext-free syntax\n  BlockStatement.FromMetaExpr  = \"~\"       StrategoLang-Term\n  BlockStatement.FromMetaExpr  = \"~bstm:\"  StrategoLang-Term\n  BlockStatement*.FromMetaExpr = \"~*\"      StrategoLang-Term\n  BlockStatement*.FromMetaExpr = \"~bstm*:\" StrategoLang-Term\n\n  Statement.FromMetaExpr       = \"~stm:\"   StrategoLang-Term {prefer}\n  Statement.FromMetaExpr       = \"~\"       StrategoLang-Term\n\n  SwitchGroup*.FromMetaExpr    =   \"~*\"              StrategoLang-Term\n  SwitchGroup*.FromMetaExpr    =   \"~switch-group*:\" StrategoLang-Term\n\n\n  SwitchGroup.FromMetaExpr     = \"~\"               StrategoLang-Term\n  SwitchGroup.FromMetaExpr     = \"~switch-group:\"  StrategoLang-Term\n\n///\n// Variables for Statements\n///\nvariables\n\n  Statement       = \"stm\"         [0-9\\']*     {prefer}\n  Statement       = \"stm_\"  [a-zA-Z0-9\\']*     {prefer}\n  BlockStatement  = \"bstm\"        [0-9\\']*     {prefer}\n  BlockStatement  = \"bstm_\" [a-zA-Z0-9\\']*     {prefer}\n  BlockStatement* = \"bstm\"        [0-9\\']* \"*\" {prefer}\n  BlockStatement* = \"bstm_\" [a-zA-Z0-9\\']* \"*\" {prefer}\n\n///\n// Quotations for Expressions\n///\ncontext-free syntax\n  StrategoLang-Term.ToMetaExpr =         \"e\" \"|[\" Expression \"]|\"\n  StrategoLang-Term.ToMetaExpr = \"java:expr\" \"|[\" Expression \"]|\"\n  StrategoLang-Term.ToMetaExpr =      \"expr\" \"|[\" Expression \"]|\"\n  StrategoLang-Term.ToMetaExpr = \"java\"      \"|[\" Expression \"]|\"\n  StrategoLang-Term.ToMetaExpr =             \"|[\" Expression \"]|\"\n\n///\n// Anti Quotations for Expressions\n///\ncontext-free syntax\n  Expression.FromMetaExpr = \"~\"      StrategoLang-Term\n  Expression.FromMetaExpr = \"~e:\"    StrategoLang-Term {prefer}\n  Expression.FromMetaExpr = \"~expr:\" StrategoLang-Term {prefer}\n\n///\n// Variables for Expressions\n///\nvariables\n  Expression        = \"e\"        [0-9\\']*     {prefer}\n  Expression        = \"e_\" [a-zA-Z0-9\\']*     {prefer}\n  {Expression \",\"}* = \"e\"        [0-9\\']* \"*\" {prefer}\n  {Expression \",\"}* = \"e_\" [a-zA-Z0-9\\']* \"*\" {prefer}\n\nlexical syntax\n  ID = \"e\"  [0-9\\']*       {reject}\n  ID = \"e_\" [a-zA-Z0-9\\']* {reject}\n\n///\n// Anti Quotations for LeftHandSide of Assignment\n///\ncontext-free syntax\n  LHS.FromMetaExpr = \"~\"     StrategoLang-Term\n  LHS.FromMetaExpr = \"~lhs:\"  StrategoLang-Term\n\n///\n// Quotations for Id\n///\ncontext-free syntax\n  StrategoLang-Term.ToMetaExpr    = \"ident\" \"|[\" Id \"]|\"\n\n///\n// Anti Quotations for ID\n///\n  ID.FromMetaExpr = \"~\"     StrategoLang-Term\n  ID.FromMetaExpr = \"~id:\"  StrategoLang-Term\n  ID.FromMetaExpr = \"~idd:\" StrategoLang-Term \":\"\n\n///\n// Variables for ID\n///\nvariables\n  ID = [xyz]            [0-9\\']* {prefer}\n  ID = [xyz] [\\_] [a-zA-Z0-9\\']* {prefer}\n\ncontext-free restrictions\n  ID -/- [\\_a-zA-Z0-9\\']\n\n///\n// Anti Quotations for Literal\n///\ncontext-free syntax\n  StringLit.FromMetaExpr = \"~\"        StrategoLang-Term\n  StringLit.FromMetaExpr = \"~strlit:\" StrategoLang-Term\n\n//  SingleChar.FromMetaExpr =     \"~\" &lt;StrategoLang-Term-CF&gt; &lt;LAYOUT?-CF&gt;  {prefer}\n\n//exports\n//  variables\n//  DeciLiteral =     [ij]  [0-9\\']* {prefer}\n//  DeciLiteral =     [ij]  [\\_] [a-zA-Z0-9\\']* {prefer}\n\n//\n//  StrategoLang-Term.ToMetaExpr =     \"var-init\" \"|[\" VariableInitializer \"]|\"\n//\n/////\n// // Statements\n// ///\n//exports\n//\n//  ///\n//   // Variables for Statements\n//   ///\n//  variables\n//  Statement =     \"stm\"  [0-9\\']*         {prefer}\n//  Statement =     \"stm_\" [a-zA-Z0-9\\']*         {prefer}\n//  BlockStatement =     \"bstm\" [0-9\\']*    {prefer}\n//  BlockStatement =     \"bstm_\" [a-zA-Z0-9\\']*    {prefer}\n//  BlockStatement* =     \"bstm\" [0-9\\']* \"*\"   {prefer}\n//  BlockStatement* =     \"bstm_\" [a-zA-Z0-9\\']* \"*\"   {prefer}\n//\n//  ///\n//   // Quotations for Statements\n//   ///\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =     \"java:bstm\"  \"|[\" BlockStatement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"bstm\"  \"|[\" BlockStatement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"       \"|[\" BlockStatement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                  \"|[\" BlockStatement \"]|\"\n//\n//  StrategoLang-Term.ToMetaListExpr =     \"java:bstm*\" \"|[\" BlockStatement* \"]|\"\n//  StrategoLang-Term.ToMetaListExpr =          \"bstm*\" \"|[\" BlockStatement* \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:block-stm\"  \"|[\" BlockStatement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"block-stm\"  \"|[\" BlockStatement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"            \"|[\" BlockStatement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                       \"|[\" BlockStatement \"]|\"\n//\n//  StrategoLang-Term.ToMetaListExpr =     \"java:block-stm*\" \"|[\" BlockStatement* \"]|\"\n//  StrategoLang-Term.ToMetaListExpr =          \"block-stm*\" \"|[\" BlockStatement* \"]|\"\n//\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:stm\"  \"|[\" Statement \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"stm\"  \"|[\" Statement \"]|\"\n//\n//  StrategoLang-Term.ToMetaListExpr =          \"switch-group\" \"|[\" SwitchGroup \"]|\"\n//  StrategoLang-Term.ToMetaListExpr =     \"java:switch-group\" \"|[\" SwitchGroup \"]|\"\n//\n//  ///\n//   // Anti Quotations for Statements\n//   ///\n//  context-free syntax\n//  BlockStatement.FromMetaExpr =     \"~\"       StrategoLang-Term\n//  BlockStatement.FromMetaExpr =     \"~bstm:\"  StrategoLang-Term\n//  BlockStatement*.FromMetaExpr =     \"~*\"      StrategoLang-Term\n//  BlockStatement*.FromMetaExpr =     \"~bstm*:\" StrategoLang-Term\n//\n//  Statement.FromMetaExpr =     \"~stm:\"   StrategoLang-Term {prefer}\n//  Statement.FromMetaExpr =     \"~\"       StrategoLang-Term\n//\n//  SwitchGroup*.FromMetaExpr =     \"~*\"              StrategoLang-Term\n//  SwitchGroup*.FromMetaExpr =     \"~switch-group*:\" StrategoLang-Term\n//\n//  SwitchGroup.FromMetaExpr =     \"~\"               StrategoLang-Term\n//  SwitchGroup.FromMetaExpr =     \"~switch-group:\"  StrategoLang-Term\n//\n/////\n// // Variable Declarations\n// ///\n//\n//  ///\n//   // Variables for Variable Declarations\n//   ///\n//  variables\n//  LocalVariableDeclaration =     \"lvdec\" [0-9]*    {prefer}\n//  LocalVariableDeclaration =     \"lvdec_\" [a-zA-Z0-9]*    {prefer}\n//  VarDecl =      \"vdec\" [0-9]*         {prefer}\n//  VarDecl =      \"vdec_\" [a-zA-Z0-9]*         {prefer}\n//     \"vdec\"  [0-9]* \"*\"       -&gt; {VarDecl \",\"}+  {prefer}\n//     \"vdec_\" [a-zA-Z0-9]* \"*\" -&gt; {VarDecl \",\"}+  {prefer}\n//\n//  lexical syntax\n//  ID =     \"lvdec\" {reject}\n//  ID =     \"lvdec_\" [a-zA-Z0-9]* {reject}\n//  ID =      \"vdec\" {reject}\n//  ID =      \"vdec_\" [a-zA-Z0-9]* {reject}\n//\n//  ///\n//   // Quotations for Local Variable Declarations\n//   ///\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =     \"java:lvdec\"  \"|[\" LocalVariableDeclaration \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"lvdec\"  \"|[\" LocalVariableDeclaration \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:vdec\" \"|[\" VarDecl \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"vdec\" \"|[\" VarDecl \"]|\"\n//\n//  ///\n//   // Anti Quotations for Local Variable Declarations\n//   ///\n//  context-free syntax\n//\n/////\n// // LeftHandSide of Assignment\n// ///\n//exports\n//\n//  ///\n//   // Variables for LeftHandSide of Assignment\n//   ///\n//  variables\n//  LHS =     \"lhs\" [0-9\\']* {prefer}\n//  LHS =     \"e\"   [0-9\\']* {prefer}\n//\n//  lexical syntax\n//  ID =     \"lhs\" [0-9\\']* {reject}\n//\n/////\n// // Types\n// ///\n//exports\n//\n//  ///\n//   // Variables for Types\n//   ///\n//  variables\n//  Type =     MetaTypeVar     {prefer}\n//  PrimType =     MetaPrimTypeVar {prefer}\n//  RefType =     MetaRefTypeVar  {prefer}\n//\n//  lexical syntax\n//  MetaTypeVar =     \"t\"  [0-9\\']*\n//  MetaTypeVar =     \"t_\" [a-zA-Z0-9\\']*\n//  MetaTypeVar =     \"ty\" [0-9]*\n//  MetaTypeVar =     \"ty_\" [a-zA-Z0-9\\']*\n//\n//  MetaPrimTypeVar =     \"primt\"  [0-9]*\n//  MetaPrimTypeVar =     \"primt_\" [a-zA-Z0-9]*\n//  MetaPrimTypeVar =     \"primty\" [0-9]*\n//  MetaPrimTypeVar =     \"primty_\" [a-zA-Z0-9]*\n//  MetaRefTypeVar =     \"reft\"   [0-9]*\n//  MetaRefTypeVar =     \"reft_\" [a-zA-Z0-9]*\n//  MetaRefTypeVar =     \"refty\"  [0-9]*\n//  MetaRefTypeVar =     \"refty_\" [a-zA-Z0-9]*\n//\n//  ID =     \"t\"  [0-9\\']* {reject}\n//  ID =     \"t_\" [a-zA-Z0-9]* {reject}\n//  ID =     \"ty\" [0-9]* {reject}\n//  ID =     \"ty_\" [a-zA-Z0-9]* {reject}\n//  ID =     \"primt\"  [0-9]* {reject}\n//  ID =     \"primt_\" [a-zA-Z0-9]*  {reject}\n//  ID =     \"primty\" [0-9]* {reject}\n//  ID =     \"primty_\" [a-zA-Z0-9]* {reject}\n//  ID =     \"reft\"   [0-9]* {reject}\n//  ID =     \"reft_\" [a-zA-Z0-9]* {reject}\n//  ID =     \"refty\"  [0-9]* {reject}\n//  ID =     \"refty_\" [a-zA-Z0-9]* {reject}\n//\n//  lexical restrictions\n//    MetaTypeVar -/- [a-zA-Z0-9\\_\\$\\']\n//\n//  ///\n//   // Quotation for Types\n//   ///\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =             \"t\" \"|[\" Type \"]|\"\n//  StrategoLang-Term.ToMetaExpr =            \"ty\" \"|[\" Type \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:type\" \"|[\" Type \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"type\" \"|[\" Type \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"      \"|[\" Type \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                 \"|[\" Type \"]|\"\n//\n//  ///\n//   // Anti-Quotation for Types\n//   ///\n//  context-free syntax\n//  Type.FromMetaExpr =     \"~\"       StrategoLang-Term\n//  Type.FromMetaExpr =     \"~type:\"  StrategoLang-Term\n//\n/////\n// // Names\n// ///\n//exports\n//\n//  ///\n//   // Variables for Names\n//   ///\n//  variables\n//  AmbName =     \"ambname\"  [0-9]*    {prefer}\n//  AmbName =     \"ambname_\" [a-zA-Z0-9]*    {prefer}\n//  ExprName =     \"ename\"    [0-9]*   {prefer}\n//  ExprName =     \"ename_\" [a-zA-Z0-9]*   {prefer}\n//  MethodName =     \"fname\"    [0-9]* {prefer}\n//  MethodName =     \"fname_\" [a-zA-Z0-9]* {prefer}\n//  TypeName =     \"tname\"    [0-9]*   {prefer}\n//  TypeName =     \"tname_\" [a-zA-Z0-9]*   {prefer}\n//  PackageOrTypeName =     \"pkgtname\" [0-9]*  {prefer}\n//  PackageOrTypeName =     \"pkgtname_\" [a-zA-Z0-9]*  {prefer}\n//  PackageName =     \"pkgname\" [0-9]*  {prefer}\n//  PackageName =     \"pkgname_\" [a-zA-Z0-9]*  {prefer}\n//\n//  ///\n//   // Quotations for Names\n//   ///\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =     \"ambname\"  \"|[\" AmbName    \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"ename\"    \"|[\" ExprName   \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"fname\"    \"|[\" MethodName \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"tname\"    \"|[\" TypeName   \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"pkgtname\" \"|[\" PackageOrTypeName \"]|\"\n//\n/////\n// // Modifiers\n// ///\n//exports\n//\n//  ///\n//   // Variables for Modifiers\n//   ///\n//  variables\n//  MethodMod =      \"mod\" [0-9]*  {prefer}\n//  MethodMod =      \"mod_\" [a-zA-Z0-9]*  {prefer}\n//  (Annotation =      \"mod\" [0-9]* \"*\" | MethodMod)* {prefer}\n//  (Annotation =      \"mod_\" [a-zA-Z0-9]* \"*\" | MethodMod)* {prefer}\n//\n//  ClassMod =      \"mod\" [0-9]*  {prefer}\n//  ClassMod =      \"mod_\" [a-zA-Z0-9]*  {prefer}\n//  (Annotation | ClassMod)* {prefer} =      \"mod\" [0-9]* \"*\"\n//  (Annotation | ClassMod)* {prefer} =      \"mod_\" [a-zA-Z0-9]* \"*\"\n//\n//  ConstrMod =      \"mod\" [0-9]*  {prefer}\n//  ConstrMod =      \"mod_\" [a-zA-Z0-9]*  {prefer}\n//  (Annotation | ConstrMod)* =      \"mod\" [0-9]* \"*\" {prefer}\n//  (Annotation | ConstrMod)* =      \"mod_\" [a-zA-Z0-9]* \"*\" {prefer}\n//\n//  VarMod =      \"mod\" [0-9]*  {prefer}\n//  VarMod =      \"mod_\" [a-zA-Z0-9]*  {prefer}\n//  (Annotation | VarMod)* =      \"mod\" [0-9]* \"*\" {prefer}\n//  (Annotation | VarMod)* =      \"mod_\" [a-zA-Z0-9]* \"*\" {prefer}\n//\n//  FieldMod =      \"mod\" [0-9]*  {prefer}\n//  FieldMod =      \"mod_\" [a-zA-Z0-9]*  {prefer}\n//  (Annotation | FieldMod)* =      \"mod\" [0-9]* \"*\" {prefer}\n//  (Annotation | FieldMod)* =      \"mod_\" [a-zA-Z0-9]* \"*\" {prefer}\n//\n//  ///\n//   // Quotations for Modifiers\n//   ///\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =            \"|[\" FieldModifier \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"mod\"  \"|[\" FieldModifier \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"anno\" \"|[\" Annotation \"]|\"\n//\n//\n/////\n// // Package Declarations\n// ///\n//exports\n//\n//  ///\n//   // Quotations\n//   ///\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =     \"java:package-dec\" \"|[\" PackageDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"package-dec\" \"|[\" PackageDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                        \"|[\" PackageDec  \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:package-dec?\" \"|[\" PackageDec? \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"package-dec?\" \"|[\" PackageDec? \"]|\"\n//\n//  ///\n//   // Anti Quotations\n//   ///\n//  context-free syntax\n//  PackageDec.FromMetaExpr =     \"~package-dec:\"  StrategoLang-Term\n//  PackageDec?.FromMetaExpr =     \"~package-dec?:\" StrategoLang-Term\n//\n/////\n// // Import Declarations\n// ///\n//exports\n//\n//  ///\n//   // Quotations for Import Declarations\n//   ///\n//  context-free syntax\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:import-dec\"  \"|[\" ImportDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"import-dec\"  \"|[\" ImportDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                        \"|[\" ImportDec  \"]|\"\n//\n//  StrategoLang-Term.ToMetaListExpr =     \"java:import-dec*\" \"|[\" ImportDec* \"]|\"\n//  StrategoLang-Term.ToMetaListExpr =          \"import-dec*\" \"|[\" ImportDec* \"]|\"\n//\n//  ///\n//   // Anti Quotations for Import Declarations\n//   ///\n//  context-free syntax\n//\n//  ImportDec.FromMetaExpr =     \"~import-dec:\"  StrategoLang-Term\n//  ImportDec*.FromMetaExpr =     \"~import-dec*:\" StrategoLang-Term\n//\n/////\n// // Must be cleaned up\n// ///\n//exports\n//  context-free syntax\n//  StrategoLang-Term.ToMetaExpr =             \"e\" \"|[\" Expr \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java:expr\" \"|[\" Expr \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"expr\" \"|[\" Expr \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"      \"|[\" Expr \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                 \"|[\" Expr \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:compilation-unit\" \"|[\" CompilationUnit \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"compilation-unit\" \"|[\" CompilationUnit \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"                  \"|[\" CompilationUnit \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                             \"|[\" CompilationUnit \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:importdecl\" \"|[\" ImportDec \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"importdecl\" \"|[\" ImportDec \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"            \"|[\" ImportDec \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:type-dec\" \"|[\" TypeDec \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"type-dec\" \"|[\" TypeDec \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"          \"|[\" TypeDec \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                     \"|[\" TypeDec \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:class-body-dec\" \"|[\"  ClassBodyDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"class-body-dec\" \"|[\"  ClassBodyDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"                \"|[\"  ClassBodyDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                           \"|[\"  ClassBodyDec  \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:interface-member-dec\" \"|[\" InterfaceMemberDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"interface-member-dec\" \"|[\" InterfaceMemberDec  \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:constant-dec\" \"|[\" ConstantDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"constant-dec\" \"|[\" ConstantDec  \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:class-body-dec*\" \"|[\" ClassBodyDec* \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"class-body-dec*\" \"|[\" ClassBodyDec* \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"                 \"|[\" ClassBodyDec* \"]|\"\n//  StrategoLang-Term.ToMetaListExpr =                            \"|[\" ClassBodyDec* \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:stm\" \"|[\"  Stm \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"stm\" \"|[\"  Stm \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:imember-dec\" \"|[\"  AbstractMethodDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"imember-dec\" \"|[\"  AbstractMethodDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"             \"|[\"  AbstractMethodDec  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                        \"|[\"  AbstractMethodDec  \"]|\"\n//\n//  StrategoLang-Term.ToMetaExpr =     \"java:imember-dec*\" \"|[\"  AbstractMethodDec*  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =          \"imember-dec*\" \"|[\"  AbstractMethodDec*  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =     \"java\"              \"|[\"  AbstractMethodDec*  \"]|\"\n//  StrategoLang-Term.ToMetaExpr =                         \"|[\"  AbstractMethodDec*  \"]|\"\n//\n//  // Anti-quotation\n//  context-free syntax\n//\n//  Name.FromMetaExpr =     \"~\"      StrategoLang-Term\n//  Name.FromMetaExpr =     \"~name:\" StrategoLang-Term\n//  Name.FromMetaExpr =     \"~*:\"    StrategoLang-Term\n//\n//  Id.FromMetaExpr =     \"~\"     StrategoLang-Term\n//  Id.FromMetaExpr =     \"~id:\"  StrategoLang-Term\n//  Id.FromMetaExpr =     \"~idd:\" StrategoLang-Term \":\"\n//\n//  ID.FromMetaExpr =     \"~x:\" StrategoLang-Term\n//\n//  TypeParam.FromMetaExpr =     \"~\"  StrategoLang-Term\n//  {TypeParam \",\"}+.FromMetaExpr =     \"~*\" StrategoLang-Term\n//\n//  {ExceptionType \",\"}*.FromMetaExpr =     \"~*\" StrategoLang-Term\n//\n//  Expr.FromMetaExpr =     \"~\"      StrategoLang-Term\n//  Expr.FromMetaExpr =     \"~e:\"    StrategoLang-Term {prefer}\n//  Expr.FromMetaExpr =     \"~expr:\" StrategoLang-Term {prefer}\n//\n//  {Expr \",\"}*.FromMetaExpr =     \"~*\" StrategoLang-Term\n//  {VarInit \",\"}*.FromMetaExpr =     \"~*\" StrategoLang-Term\n//\n//  TypeDec.FromMetaExpr =     \"~\"  StrategoLang-Term\n//  TypeDec*.FromMetaExpr =     \"~*\" StrategoLang-Term\n//\n//  ClassBodyDec.FromMetaExpr =     \"~\"  StrategoLang-Term\n//  ClassBodyDec*.FromMetaExpr =     \"~*\" StrategoLang-Term\n//\n//  InterfaceMemberDec.FromMetaExpr =     \"~\"  StrategoLang-Term\n//  InterfaceMemberDec*.FromMetaExpr =     \"~*\" StrategoLang-Term\n//\n//  DeciLiteral.FromMetaExpr =     \"~i:\"      StrategoLang-Term\n//  DeciLiteral.FromMetaExpr =     \"~deci:\"   StrategoLang-Term\n//  HexaLiteral.FromMetaExpr =     \"~hexa:\"   StrategoLang-Term\n//  OctaLiteral.FromMetaExpr =     \"~octa:\"   StrategoLang-Term\n//  FloatLiteral.FromMetaExpr =     \"~float:\"  StrategoLang-Term\n//  StringLiteral.FromMetaExpr =     \"~string:\" StrategoLang-Term\n//  CharLiteral.FromMetaExpr =     \"~char:\"   StrategoLang-Term\n//\n//  syntax\n//  StringChars.FromMetaExpr =     \"~\" &lt;StrategoLang-Term-CF&gt; {prefer}\n//  SingleChar.FromMetaExpr =     \"~\" &lt;StrategoLang-Term-CF&gt; &lt;LAYOUT?-CF&gt;  {prefer}\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/Java_StrategoMix.sdf3/#modal-h2","title":"Java_StrategoMix.sdf3","text":""},{"location":"lang.java/syntax/metaborg-java.sdf3/","title":"<code>metaborg-java.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/metaborg-java.sdf3</p> <pre><code>module metaborg-java\n\n// The Java Language Specification\n// Java SE 8 Edition\n\nimports\n  java/Main\n  java/Test\n  java/packages/CompilationUnits\n\ncontext-free sorts\n\n  Start\n\ncontext-free start-symbols\n\n  Start\n\ncontext-free syntax\n\n  Start = CompilationUnit\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/metaborg-java.sdf3/#modal-h2","title":"metaborg-java.sdf3","text":""},{"location":"lang.java/syntax/java/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/Main.sdf3</p> <pre><code>module java/Main\n\n// The Java Language Specification\n// Java SE 8 Edition\n\nimports\n  java/arrays/Main\n  java/classes/Main\n  java/interfaces/Main\n  java/lexical/Main\n  java/literals/Main\n  java/names/Main\n  java/packages/Main\n  java/statements/Main\n  java/types/Main  \n  java/expressions/Main\n  java/expressions/Disambiguation\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/Test.sdf3/","title":"<code>Test.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/Test.sdf3</p> <pre><code>module java/Test\n\n// The Java Language Specification\n// Java SE 8 Edition\n\nimports\n  java/Main\n  java/lexical/Comments\n  java/lexical/Identifiers\n  java/lexical/LineTerminators\n  java/packages/CompilationUnits\n\ncontext-free sorts\n\n  Expectation TestUnit\n\ncontext-free syntax\n\n  CompilationUnit.Test = &lt;\n    test;\n    &lt;{TestUnit \"\\n\"}*&gt;\n  &gt;\n\n  TestUnit.TestPkg = &lt;\n    [&lt;ID&gt;] {\n      &lt;{TestUnit \"\\n\"}*&gt;\n    }\n  &gt;\n\n  TestUnit.TestFile = &lt;\n    [&lt;ID&gt;]\n    &lt;CompilationUnit&gt;\n  &gt;\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/Test.sdf3/#modal-h2","title":"Test.sdf3","text":""},{"location":"lang.java/syntax/java/arrays/ArrayInitializers.sdf3/","title":"<code>ArrayInitializers.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/arrays/ArrayInitializers.sdf3</p> <pre><code>module java/arrays/ArrayInitializers\n\n// 10.6. Array Initializers\n\nimports\n  java/classes/FieldDeclarations\n\ncontext-free sorts\n\n  ArrayInitializer\n\ncontext-free syntax\n\n  ArrayInitializer.ArrayInit      = &lt;{&lt;{VariableInitializer \",\"}*&gt;}&gt;\n  ArrayInitializer.ArrayInitComma = &lt;{&lt;{VariableInitializer \",\"}*&gt;, }&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/arrays/ArrayInitializers.sdf3/#modal-h2","title":"ArrayInitializers.sdf3","text":""},{"location":"lang.java/syntax/java/arrays/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/arrays/Main.sdf3</p> <pre><code>module java/arrays/Main\n\n// Chapter 10. Arrays\n\nimports\n  java/arrays/ArrayInitializers\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/arrays/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/classes/ClassDeclarations.sdf3/","title":"<code>ClassDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/ClassDeclarations.sdf3</p> <pre><code>module java/classes/ClassDeclarations\n\n// 8.1. Class Declarations\n\nimports\n  java/lexical/Identifiers\n  java/lexical/Modifiers\n  java/lexical/SemiColon\n  java/types/ReferenceTypes\n  java/classes/FieldDeclarations\n  java/classes/MethodDeclarations\n  java/classes/InstanceInitializers\n  java/classes/StaticInitializers\n  java/classes/EnumDeclarations\n  java/classes/ConstructorDeclarations\n  java/interfaces/Annotations\n  java/interfaces/InterfaceDeclarations\n  java/types/TypeVariable\n\ncontext-free sorts\n\n  ClassDeclaration\n  NormalClassDeclaration\n  ClassModifier\n  TypeParameters\n  SuperClass\n  SuperInterfaces\n  ClassBodyDeclaration\n  ClassMemberDeclaration\n\ncontext-free syntax\n\n  ClassDeclaration = NormalClassDeclaration\n  ClassDeclaration  = EnumDeclaration\n\n  NormalClassDeclaration.ClassDeclaration = &lt;\n  &lt;{ClassModifier \" \"}*&gt; class &lt;Id&gt;&lt;TypeParameters?&gt; &lt;SuperClass?&gt; &lt;SuperInterfaces?&gt; {\n    &lt;{ClassBodyDeclaration \"\\n\"}*&gt;\n  }&gt;\n\n  ClassModifier = Annotation\n  ClassModifier = Public\n  ClassModifier = Protected\n  ClassModifier = Private\n  ClassModifier = Abstract\n  ClassModifier = Static\n  ClassModifier = Final\n  ClassModifier = Strictfp\n\n  TypeParameters.TypeParameters               = [&lt;[{TypeParameter \",\"}+]&gt;]\n\n  // TypeParameter is already defined in 4.4 / java/types/TypeVariable\n\n  SuperClass.SuperClass = &lt;extends &lt;ClassType&gt;&gt;\n\n  SuperInterfaces.SuperInterface = &lt;implements &lt;{ClassType \", \"}+&gt;&gt;\n\n  ClassBodyDeclaration = ClassMemberDeclaration\n  ClassBodyDeclaration  = InstanceInitializer\n  ClassBodyDeclaration  = StaticInitializer\n  ClassBodyDeclaration  = ConstructorDeclaration\n\n  ClassMemberDeclaration = FieldDeclaration\n  ClassMemberDeclaration = MethodDeclaration\n  ClassMemberDeclaration = ClassDeclaration\n  ClassMemberDeclaration = InterfaceDeclaration\n  ClassMemberDeclaration = SemiColon\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/ClassDeclarations.sdf3/#modal-h2","title":"ClassDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/classes/ConstructorDeclarations.sdf3/","title":"<code>ConstructorDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/ConstructorDeclarations.sdf3</p> <pre><code>module java/classes/ConstructorDeclarations\n\n// 8.8. Constructor Declarations\n\nimports\n  java/classes/ClassDeclarations\n  java/lexical/Identifiers\n  java/lexical/Modifiers\n  java/classes/MethodDeclarations\n  java/types/ParameterizedTypes\n  java/names/Names\n  java/interfaces/Annotations\n  java/expressions/Main\n  java/statements/Blocks\n\ncontext-free sorts\n\n  ConstructorDeclaration\n  ConstructorModifier\n  ConstructorInvocation\n\ncontext-free syntax\n\n  ConstructorDeclaration.ConstrDecl = &lt;\n  &lt;{ConstructorModifier \" \"}*&gt; &lt;TypeParameters?&gt; &lt;Id&gt;(&lt;FormalParams&gt;) &lt;Throws?&gt;{\n    &lt;ConstructorInvocation?&gt;\n    &lt;{BlockStatement \"\\n\"}*&gt;\n  }&gt;\n\n  ConstructorModifier = Annotation\n  ConstructorModifier = Public\n  ConstructorModifier = Private\n  ConstructorModifier = Protected\n\n  ConstructorInvocation.AltConstrInv      = &lt;&lt;TypeArguments?&gt;this(&lt;{Expression \", \"}*&gt;);&gt;\n  ConstructorInvocation.SuperConstrInv    = &lt;&lt;TypeArguments?&gt;super(&lt;{Expression \", \"}*&gt;);&gt;\n  ConstructorInvocation.ExprNameConstrInv = &lt;&lt;Expression&gt;.&lt;TypeArguments?&gt;super(&lt;{Expression \", \"}*&gt;);&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/ConstructorDeclarations.sdf3/#modal-h2","title":"ConstructorDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/classes/EnumDeclarations.sdf3/","title":"<code>EnumDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/EnumDeclarations.sdf3</p> <pre><code>module java/classes/EnumDeclarations\n\n// 8.9. Enum Types\n\nimports\n  java/lexical/Identifiers\n  java/classes/ClassDeclarations\n  java/interfaces/Annotations\n  java/expressions/Main\n\ncontext-free sorts\n\n  EnumDeclaration\n  EnumConstant\n  EnumConstantArgs\n  EnumBodyDeclarations\n\ncontext-free syntax\n\n  EnumDeclaration.EnumDeclComma = &lt;\n  &lt;{ClassModifier \" \"}*&gt; enum &lt;Id&gt; &lt;SuperInterfaces?&gt; {\n    &lt;{EnumConstant \", \"}*&gt;,\n    &lt;EnumBodyDeclarations?&gt;\n  }&gt;\n  EnumDeclaration.EnumDecl = &lt;\n  &lt;{ClassModifier \" \"}*&gt; enum &lt;Id&gt; &lt;SuperInterfaces?&gt; {\n    &lt;{EnumConstant \", \"}*&gt;\n    &lt;EnumBodyDeclarations?&gt;\n  }&gt;\n  EnumConstant.EnumConst = &lt;\n  &lt;{Annotation \" \"}*&gt; &lt;Id&gt; &lt;EnumConstantArgs?&gt;{\n    &lt;{ClassBodyDeclaration \"\\n\"}*&gt;\n  }&gt;\n  EnumConstant.EnumConstNoBody = &lt;\n  &lt;{Annotation \" \"}*&gt; &lt;Id&gt; &lt;EnumConstantArgs?&gt;&gt;\n\n  EnumConstantArgs.EnumConstArgs    = &lt;(&lt;{Expression \", \"}*&gt;)&gt;\n  EnumBodyDeclarations.EnumBodyDecs = &lt;;  &lt;{ClassBodyDeclaration \"\\n\"}*&gt;&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/EnumDeclarations.sdf3/#modal-h2","title":"EnumDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/classes/FieldDeclarations.sdf3/","title":"<code>FieldDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/FieldDeclarations.sdf3</p> <pre><code>module java/classes/FieldDeclarations\n\n// 8.3. Field Declarations\n\nimports\n  java/lexical/Identifiers\n  java/lexical/Modifiers\n  java/types/ReferenceTypes\n  java/types/PrimitiveTypes\n  java/types/ParameterizedTypes\n  java/interfaces/Annotations\n  java/arrays/ArrayInitializers\n  java/expressions/Main\n\ncontext-free sorts\n\n  FieldDeclaration\n  VarDeclId\n  VarDecl\n  VariableInitializer\n  FieldModifier\n  UnannType\n  UnannPrimitiveType\n  UnannReferenceType\n  UnannClassType\n  UnannArrayType\n\ncontext-free syntax\n\n  FieldDeclaration.FieldDecl = &lt;&lt;{FieldModifier \" \"}*&gt; &lt;UnannType&gt; &lt;{VarDecl \", \"}+&gt;;&gt;\n  VarDeclId.VariableDecl      = Id\n  VarDeclId.VariableDeclArray = &lt;&lt;Id&gt;&lt;AnnotatedDim+&gt;&gt;\n  VarDecl.VariableDeclInit    = &lt;&lt;VarDeclId&gt; = &lt;VariableInitializer&gt;&gt;\n  VarDecl                     = VarDeclId\n\n  VariableInitializer = Expression\n  VariableInitializer = ArrayInitializer\n\n  FieldModifier = Annotation\n  FieldModifier = Public\n  FieldModifier = Protected\n  FieldModifier = Private\n  FieldModifier = Static\n  FieldModifier = Final\n  FieldModifier = Transient\n  FieldModifier = Volatile\n\ncontext-free syntax  \n\n  UnannType = UnannPrimitiveType\n  UnannType = UnannReferenceType\n\n  UnannPrimitiveType.NumericType = NumericType\n  UnannPrimitiveType.BooleanType = \"boolean\"\n\n  UnannReferenceType = UnannClassType\n  UnannReferenceType = UnannArrayType\n\n  UnannClassType.ClassType                       = &lt;&lt;Id&gt;&lt;TypeArguments?&gt;&gt;\n  UnannClassType.UnannClassOrInterfaceTypeMember = &lt;&lt;UnannClassType&gt;.&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&lt;TypeArguments?&gt;&gt;\n\n//  ambiguous with UnannClassType.ClassType\n//  UnannTypeVariable.TypeVar            = Id\n\n  UnannArrayType.UnannArrayTypePrimitive    = &lt;&lt;UnannPrimitiveType&gt; &lt;AnnotatedDim+&gt;&gt;\n  UnannArrayType.UnannArrayTypeClassType    = &lt;&lt;UnannClassType&gt; &lt;AnnotatedDim+&gt;&gt;\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/FieldDeclarations.sdf3/#modal-h2","title":"FieldDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/classes/InstanceInitializers.sdf3/","title":"<code>InstanceInitializers.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/InstanceInitializers.sdf3</p> <pre><code>module java/classes/InstanceInitializers\n\n// 8.6. Instance Initializers\n\nimports\n  java/statements/Blocks\n\ncontext-free sorts\n\n  InstanceInitializer\n\ncontext-free syntax\n\n  InstanceInitializer.InstanceInit = Block\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/InstanceInitializers.sdf3/#modal-h2","title":"InstanceInitializers.sdf3","text":""},{"location":"lang.java/syntax/java/classes/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/Main.sdf3</p> <pre><code>module java/classes/Main\n\n// Chapter 8. Classes\n\nimports\n  java/classes/ClassDeclarations\n  java/classes/FieldDeclarations\n  java/classes/MethodDeclarations\n  java/classes/EnumDeclarations\n  java/classes/InstanceInitializers\n  java/classes/StaticInitializers\n  java/classes/ConstructorDeclarations\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/classes/MethodDeclarations.sdf3/","title":"<code>MethodDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/MethodDeclarations.sdf3</p> <pre><code>module java/classes/MethodDeclarations\n\n// 8.4. Method Declarations\nimports\n  java/classes/FieldDeclarations\n  java/types/ReferenceTypes\n  java/classes/ClassDeclarations\n  java/lexical/Identifiers\n  java/lexical/Modifiers\n  java/interfaces/Annotations\n  java/statements/Blocks\n\ncontext-free sorts\n\n  MethodDeclaration\n  MethodHeader\n  Result\n  Throws\n  ExceptionType\n  MethodModifier\n  MethodBody\n  ReceiverParam\n  FormalParams\n  LastFormalParam\n  FormalParam\n  VariableModifier\n\ncontext-free syntax\n\n  MethodDeclaration.MethodDecl = &lt;\n  &lt;{MethodModifier \" \"}*&gt; &lt;MethodHeader&gt; &lt;MethodBody&gt;&gt;\n\n  MethodHeader.MethodHeader = &lt;\n  &lt;Result&gt; &lt;Id&gt;(&lt;FormalParams&gt;) &lt;AnnotatedDimsEmpty&gt; &lt;Throws?&gt;&gt;\n\n  MethodHeader.MethodHeaderTypeParameters = &lt;\n  &lt;TypeParameters&gt; &lt;{Annotation \" \"}*&gt; &lt;Result&gt; &lt;Id&gt;(&lt;FormalParams&gt;) &lt;Throws?&gt;&gt;\n\n  Result = UnannType\n  Result.Void = \"void\"\n\n  Throws.ThrowsDec = &lt;throws &lt;{ExceptionType \", \"}+&gt;&gt;\n  ExceptionType    = ClassType\n\n  MethodModifier = Annotation\n  MethodModifier = Public\n  MethodModifier = Protected\n  MethodModifier = Private\n  MethodModifier = Abstract\n  MethodModifier = Static\n  MethodModifier = Final\n  MethodModifier = Synchronized\n  MethodModifier = Native\n  MethodModifier = Strictfp\n\n  MethodBody         = Block\n  MethodBody.NoMethodBody = \";\"\n\n  ReceiverParam.ReceiverParamQual = &lt;&lt;{Annotation \" \"}*&gt; &lt;UnannType&gt; &lt;Id&gt;.this&gt;\n  ReceiverParam.ReceiverParam     = &lt;&lt;{Annotation \" \"}*&gt; &lt;UnannType&gt; this&gt;\n\n  FormalParams.NoParams          = \n  FormalParams                   = ReceiverParam\n  FormalParams.SingleParam       = LastFormalParam\n  FormalParams.ParamList         = &lt;&lt;{FormalParam \",\"}+&gt;, &lt;LastFormalParam&gt;&gt;\n  FormalParams.ReceiverParamList = &lt;&lt;ReceiverParam&gt;, &lt;{FormalParam \",\"}*&gt;, &lt;LastFormalParam&gt;&gt;\n\n  LastFormalParam        = FormalParam\n  LastFormalParam.VarArityParam = &lt;&lt;{VariableModifier \" \"}*&gt; &lt;UnannType&gt; &lt;{Annotation \" \"}*&gt; ... &lt;VarDeclId&gt;&gt;\n\n  FormalParam.FormalParam = &lt;&lt;{VariableModifier \" \"}*&gt; &lt;UnannType&gt; &lt;VarDeclId&gt;&gt;\n\n  VariableModifier = Annotation\n  VariableModifier = Final\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/MethodDeclarations.sdf3/#modal-h2","title":"MethodDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/classes/StaticInitializers.sdf3/","title":"<code>StaticInitializers.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/classes/StaticInitializers.sdf3</p> <pre><code>module java/classes/StaticInitializers\n\n// 8.7. Static Initializers\n\nimports\n  java/statements/Blocks\n\ncontext-free sorts\n\n  StaticInitializer\n\ncontext-free syntax\n\n  StaticInitializer.StaticInit = &lt;static &lt;Block&gt;&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/classes/StaticInitializers.sdf3/#modal-h2","title":"StaticInitializers.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/ArrayAccess.sdf3/","title":"<code>ArrayAccess.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/ArrayAccess.sdf3</p> <pre><code>module java/expressions/ArrayAccess\n\n// 15.10.3. Array Access Expressions\n\nimports\n  java/names/Names\n  java/expressions/ArrayCreation\n\ncontext-free sorts\n\n  ArrayAccess\n\ncontext-free syntax\n\n  Expression = ArrayAccess\n\n  ArrayAccess.ArrayAccess = &lt;&lt;Expression&gt;[&lt;Expression&gt;]&gt;\n\ncontext-free priorities\n\n  ArrayAccess.ArrayAccess &lt;0&gt; . &gt; Expression = ArrayCreationExpression\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/ArrayAccess.sdf3/#modal-h2","title":"ArrayAccess.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/ArrayCreation.sdf3/","title":"<code>ArrayCreation.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/ArrayCreation.sdf3</p> <pre><code>module java/expressions/ArrayCreation\n\n// 15.10.1. Array Creation Expressions\n\nimports\n  java/types/ReferenceTypes\n  java/types/PrimitiveTypes\n  java/interfaces/Annotations\n  java/arrays/ArrayInitializers\n\ncontext-free sorts\n\n  ArrayCreationExpression\n  ArrayBaseType\n  DimExpr\n\ncontext-free syntax\n\n  Expression = ArrayCreationExpression\n  ArrayCreationExpression.NewArray = &lt;new &lt;ArrayBaseType&gt;&lt;{DimExpr \" \"}+&gt;&lt;AnnotatedDimsEmpty&gt;&gt;\n  ArrayCreationExpression.NewArrayInit = &lt;new &lt;ArrayBaseType&gt;&lt;AnnotatedDims&gt;&lt;ArrayInitializer&gt;&gt;\n\n  ArrayBaseType = ClassType\n  ArrayBaseType = PrimitiveType\n\n  DimExpr.Dim = &lt;&lt;{Annotation \" \"}*&gt; [&lt;Expression&gt;]&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/ArrayCreation.sdf3/#modal-h2","title":"ArrayCreation.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/AssignmentOperators.sdf3/","title":"<code>AssignmentOperators.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/AssignmentOperators.sdf3</p> <pre><code>module java/expressions/AssignmentOperators\n\n// 15.26. Assignment Operators\n\nimports\n  java/expressions/ArrayAccess\n  java/expressions/FieldAccess\n  java/names/Names\n\ncontext-free sorts\n\n  LHS\n\ncontext-free syntax\n\n  Expression.Assign            = &lt;&lt;LHS&gt; = &lt;Expression&gt;&gt;\n  Expression.AssignMul         = &lt;&lt;LHS&gt; *= &lt;Expression&gt;&gt;\n  Expression.AssignDiv         = &lt;&lt;LHS&gt; /= &lt;Expression&gt;&gt;\n  Expression.AssignMod         = &lt;&lt;LHS&gt; %= &lt;Expression&gt;&gt;\n  Expression.AssignAdd         = &lt;&lt;LHS&gt; += &lt;Expression&gt;&gt;\n  Expression.AssignSub         = &lt;&lt;LHS&gt; -= &lt;Expression&gt;&gt;\n  Expression.AssignLeftShift   = [[LHS] &lt;&lt;= [Expression]]\n  Expression.AssignRightShift  = [[LHS] &gt;&gt;= [Expression]]\n  Expression.AssignURightShift = [[LHS] &gt;&gt;&gt;= [Expression]]\n  Expression.AssignAnd         = &lt;&lt;LHS&gt; &amp;= &lt;Expression&gt;&gt;\n  Expression.AssignXor         = &lt;&lt;LHS&gt; ^= &lt;Expression&gt;&gt;\n  Expression.AssignOr          = &lt;&lt;LHS&gt; |= &lt;Expression&gt;&gt;\n\n  LHS = ExpressionName\n  LHS = FieldAccess\n  LHS = ArrayAccess\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/AssignmentOperators.sdf3/#modal-h2","title":"AssignmentOperators.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/BinaryOperators.sdf3/","title":"<code>BinaryOperators.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/BinaryOperators.sdf3</p> <pre><code>module java/expressions/BinaryOperators\n\n// 15.17. Multiplicative Operators\n// 15.18. Additive Operators\n// 15.19. Shift Operators\n// 15.20. Relational Operators\n// 15.21. Equality Operators\n// 15.22. Bitwise and Logical Operators\n// 15.23. Conditional-And Operator &amp;&amp;\n// 15.24. Conditional-Or Operator ||\n\nimports\n  java/types/ReferenceTypes\n\ncontext-free syntax\n\n  Expression.Mul = &lt;&lt;Expression&gt; * &lt;Expression&gt;&gt; {left}\n  Expression.Div = &lt;&lt;Expression&gt; / &lt;Expression&gt;&gt; {left}\n  Expression.Mod = &lt;&lt;Expression&gt; % &lt;Expression&gt;&gt; {left}\n\n  Expression.Add = &lt;&lt;Expression&gt; + &lt;Expression&gt;&gt; {left}\n  Expression.Sub = &lt;&lt;Expression&gt; - &lt;Expression&gt;&gt; {left}\n\n  Expression.LeftShift = [[Expression] &lt;&lt; [Expression]] {left}\n  Expression.RightShift = [[Expression] &gt;&gt; [Expression]] {left}\n  Expression.URightShift = [[Expression] &gt;&gt;&gt; [Expression]] {left}\n\n  Expression.Lt   = [[Expression] &lt; [Expression]] {left}\n  Expression.Gt   = [[Expression] &gt; [Expression]] {left}\n  Expression.LtEq = [[Expression] &lt;= [Expression]] {left}\n  Expression.GtEq = [[Expression] &gt;= [Expression]] {left}\n  Expression.InstanceOf = &lt;&lt;Expression&gt; instanceof &lt;ReferenceType&gt;&gt;\n\n  Expression.Eq    = &lt;&lt;Expression&gt; == &lt;Expression&gt;&gt; {left}\n  Expression.NotEq = &lt;&lt;Expression&gt; != &lt;Expression&gt;&gt; {left}\n\n  Expression.And = &lt;&lt;Expression&gt; &amp; &lt;Expression&gt;&gt; {left}\n  Expression.Xor = &lt;&lt;Expression&gt; ^ &lt;Expression&gt;&gt; {left}\n  Expression.Or  = &lt;&lt;Expression&gt; | &lt;Expression&gt;&gt; {left}\n\n  Expression.LazyAnd = &lt;&lt;Expression&gt; &amp;&amp; &lt;Expression&gt;&gt; {left}\n  Expression.LazyOr  = &lt;&lt;Expression&gt; || &lt;Expression&gt;&gt; {left}\n\n  Expression.Cond = &lt;&lt;Expression&gt; ? &lt;Expression&gt; : &lt;Expression&gt;&gt; {right}\n\n\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/BinaryOperators.sdf3/#modal-h2","title":"BinaryOperators.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/ClassInstanceCreation.sdf3/","title":"<code>ClassInstanceCreation.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/ClassInstanceCreation.sdf3</p> <pre><code>module java/expressions/ClassInstanceCreation\n\n// 15.9. Class Instance Creation Expressions\n\nimports\n  java/names/Names\n  java/lexical/Identifiers\n  java/interfaces/Annotations\n  java/types/ParameterizedTypes\n  java/classes/ClassDeclarations\n\ncontext-free sorts\n\n  UnqualifiedInstance\n  QualifiedId\n  TypeArgumentsOrDiamond\n\ncontext-free syntax\n\n  Expression              = UnqualifiedInstance\n  Expression.QualifiedInstance = &lt;&lt;Expression&gt;.&lt;UnqualifiedInstance&gt;&gt;\n\n  UnqualifiedInstance.NewInstance = &lt;\n  new &lt;TypeArguments?&gt; &lt;{Annotation \" \"}*&gt; &lt;Id&gt; &lt;QualifiedId*&gt; &lt;TypeArgumentsOrDiamond?&gt;(&lt;{Expression \",\"}*&gt;) &gt;\n\n  UnqualifiedInstance.NewInstance = &lt;  \n  new &lt;TypeArguments?&gt; &lt;{Annotation \" \"}*&gt; &lt;Id&gt; &lt;QualifiedId*&gt; &lt;TypeArgumentsOrDiamond?&gt;(&lt;{Expression \",\"}*&gt;) {\n    &lt;{ClassBodyDeclaration \"\\n\"}*&gt;\n  }&gt;\n\n  QualifiedId.QualifiedId = &lt;.&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&gt;\n\n  TypeArgumentsOrDiamond         = TypeArguments\n  TypeArgumentsOrDiamond.Diamond = [&lt;&gt;]\n\ntemplate options  \n\n  tokenize : \"&lt;\" \n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/ClassInstanceCreation.sdf3/#modal-h2","title":"ClassInstanceCreation.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/Disambiguation.sdf3/","title":"<code>Disambiguation.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/Disambiguation.sdf3</p> <pre><code>module java/expressions/Disambiguation\n\nimports\n  java/expressions/ClassInstanceCreation\n  java/expressions/Postfix\n  java/expressions/UnaryOperators\n  java/expressions/BinaryOperators\n  java/expressions/ArrayAccess\n  java/expressions/FieldAccess\n  java/expressions/MethodInvocation\n  java/expressions/AssignmentOperators\n  java/expressions/LambdaExpressions\n  java/names/Names\n\ncontext-free priorities\n\n  FieldAccess.Field &gt; \n  Expression = ExpressionName,\n\n  ElementValue = Expression &lt;0&gt; &gt;\n  Expression.Assign  \n\ncontext-free priorities\n\n  Expression.QualifiedInstance &gt; \n  {right: \n    Expression.PostIncr \n    Expression.PostDecr } &gt;\n  { \n    Expression.CastPrimitive \n    Expression.CastReference }\n\ncontext-free priorities\n\n  Expression.CastPrimitive &gt; \n  {left: \n    Expression.Mul \n    Expression.Div\n    Expression.Mod }\n\ncontext-free priorities\n\n  Expression.CastReference &gt; \n  { Expression.PreIncr\n    Expression.PreDecr\n    Expression.Plus\n    Expression.Minus }\n  ,\n  Expression.CastReference &lt;4&gt; .&gt; \n  { Expression.Plus\n    Expression.Minus }   \n\n\ncontext-free priorities\n\n  { ArrayAccess.ArrayAccess \n    FieldAccess.Field \n    Expression.InvokeQExp } &lt;0&gt; &gt;\n  {right: \n    Expression.PostIncr \n    Expression.PostDecr } &gt;\n  { Expression.PreIncr \n    Expression.PreDecr \n    Expression.Plus \n    Expression.Minus \n    Expression.Complement \n    Expression.Not } &gt;\n  {left:\n     Expression.Mul \n     Expression.Div \n     Expression.Mod } &gt;\n  {left: \n    Expression.Add \n    Expression.Sub } &gt;\n  {left: \n    Expression.LeftShift \n    Expression.RightShift \n    Expression.URightShift } &gt;\n  {left: \n    Expression.InstanceOf \n    Expression.Lt \n    Expression.Gt \n    Expression.LtEq \n    Expression.GtEq } &gt;\n  {left: \n    Expression.Eq \n    Expression.NotEq } &gt;\n  Expression.And &gt;\n  Expression.Xor &gt;\n  Expression.Or &gt;\n  Expression.LazyAnd &gt;\n  Expression.LazyOr &gt;\n  Expression.Cond &gt;\n  {right: \n    Expression.Assign\n    Expression.AssignMul\n    Expression.AssignDiv\n    Expression.AssignMod\n    Expression.AssignAdd\n    Expression.AssignSub\n    Expression.AssignLeftShift\n    Expression.AssignRightShift\n    Expression.AssignURightShift\n    Expression.AssignAnd\n    Expression.AssignXor\n    Expression.AssignOr\n    Expression.LambdaExpression }\n\nlexical restrictions\n\n  \"+\" -/- [\\+]\n  \"-\" -/- [\\-]\n  \"/\" -/- [\\/]\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/Disambiguation.sdf3/#modal-h2","title":"Disambiguation.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/FieldAccess.sdf3/","title":"<code>FieldAccess.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/FieldAccess.sdf3</p> <pre><code>module java/expressions/FieldAccess\n\n// 15.11. Field Access Expressions\n\nimports\n  java/names/Names\n  java/lexical/Identifiers\n  java/expressions/Main\n\ncontext-free sorts\n\n  FieldAccess\n\ncontext-free syntax\n\n  Expression = FieldAccess\n\n  FieldAccess.Field       = &lt;&lt;Expression&gt;.&lt;Id&gt;&gt;\n  FieldAccess.SuperField  = &lt;super.&lt;Id&gt;&gt;\n  FieldAccess.QSuperField = &lt;&lt;TypeName&gt;.super.&lt;Id&gt;&gt;\n\n\ntemplate options\n\n  tokenize : \".\"\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/FieldAccess.sdf3/#modal-h2","title":"FieldAccess.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/LambdaExpressions.sdf3/","title":"<code>LambdaExpressions.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/LambdaExpressions.sdf3</p> <pre><code>module java/expressions/LambdaExpressions\n\n// 15.27. Lambda Expressions\n\nimports\n  java/statements/Blocks\n  java/lexical/Identifiers\n  java/classes/MethodDeclarations\n\ncontext-free sorts\n\n  LambdaParameters\n\ncontext-free syntax\n\n  Expression.LambdaExpression          = [[LambdaParameters] -&gt; [Expression]]\n  Expression.LambdaExpressionWithBlock = [[LambdaParameters] -&gt; [Block]]\n\n  LambdaParameters.SingleInferredParam = Id\n  LambdaParameters.Params              = &lt;(&lt;FormalParams&gt;)&gt;\n  LambdaParameters.InferredParams      = &lt;(&lt;{Id \", \"}+&gt;)&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/LambdaExpressions.sdf3/#modal-h2","title":"LambdaExpressions.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/Main.sdf3</p> <pre><code>module java/expressions/Main\n\n// Chapter 15. Expressions\n\nimports\n\n  java/expressions/PrimaryExpressions\n  java/expressions/ClassInstanceCreation\n  java/expressions/ArrayCreation\n  java/expressions/FieldAccess\n  java/expressions/ArrayAccess\n  java/expressions/MethodInvocation\n  java/expressions/MethodReference\n  java/expressions/Postfix\n  java/expressions/UnaryOperators\n  java/expressions/BinaryOperators\n  java/expressions/AssignmentOperators\n\n\nsorts\n  Expression\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/MethodInvocation.sdf3/","title":"<code>MethodInvocation.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/MethodInvocation.sdf3</p> <pre><code>module java/expressions/MethodInvocation\n\n// 15.12. Method Invocation Expressions\n\nimports\n  java/names/Names\n  java/lexical/Identifiers\n  java/types/ParameterizedTypes\n\ncontext-free syntax\n\n  Expression.Invoke          = &lt;&lt;MethodName&gt;(&lt;{Expression \", \"}*&gt;)&gt;\n//  ambiguous with Expression?\n//  Expression.InvokeQTypeName = &lt;&lt;TypeName&gt;.&lt;TypeArguments?&gt; &lt;Id&gt;(&lt;{Expression \", \"}*&gt;)&gt;\n//  Expression.InvokeQExpName  = &lt;&lt;ExpressionName&gt;.&lt;TypeArguments?&gt; &lt;Id&gt;(&lt;{Expression \", \"}*&gt;)&gt;\n  Expression.InvokeQExp      = &lt;&lt;Expression&gt;.&lt;TypeArguments?&gt; &lt;Id&gt;(&lt;{Expression \", \"}*&gt;)&gt;\n  Expression.InvokeSuper     = &lt;super.&lt;TypeArguments?&gt; &lt;Id&gt;(&lt;{Expression \", \"}*&gt;)&gt;\n  Expression.InvokeQSuper    = &lt;&lt;TypeName&gt;.super.&lt;TypeArguments?&gt; &lt;Id&gt;(&lt;{Expression \", \"}*&gt;)&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/MethodInvocation.sdf3/#modal-h2","title":"MethodInvocation.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/MethodReference.sdf3/","title":"<code>MethodReference.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/MethodReference.sdf3</p> <pre><code>module java/expressions/MethodReference\n\n// 15.13. Method Reference Expressions\n\nimports\n  java/types/ReferenceTypes\n  java/types/ParameterizedTypes\n  java/lexical/Identifiers\n  java/names/Names\n  java/expressions/UnaryOperators\n\ncontext-free syntax\n\n  Expression.MethodReferenceRType  = &lt;&lt;ReferenceType&gt;::&lt;TypeArguments?&gt;&lt;Id&gt;&gt;\n  Expression.MethodReferenceExpr   = &lt;&lt;Expression&gt;::&lt;TypeArguments?&gt;&lt;Id&gt;&gt;\n  Expression.MethodReferenceSuper  = &lt;super::&lt;TypeArguments?&gt;&lt;Id&gt;&gt;\n  Expression.MethodReferenceQSuper = &lt;&lt;TypeName&gt;.super::&lt;TypeArguments?&gt;&lt;Id&gt;&gt;\n  Expression.MethodReferenceCType = &lt;&lt;ClassType&gt;::&lt;TypeArguments?&gt; new&gt;\n  Expression.MethodReferenceAType = &lt;&lt;ArrayType&gt;::&lt;TypeArguments?&gt; new&gt;\n\ncontext-free priorities\n  Expression.MethodReferenceExpr &gt; Expression = ExpressionName,\n  Expression.MethodReferenceExpr &gt;  Expression.CastReference\n\ntemplate options\n\n  tokenize : \"::\"  \n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/MethodReference.sdf3/#modal-h2","title":"MethodReference.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/Postfix.sdf3/","title":"<code>Postfix.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/Postfix.sdf3</p> <pre><code>module java/expressions/Postfix\n\n// 15.14. Postfix Expressions\n\nimports\n  java/names/Names\n  java/expressions/Main\n\ncontext-free syntax\n\n  Expression.PostIncr = &lt;&lt;Expression&gt;++&gt;\n  Expression.PostDecr = &lt;&lt;Expression&gt;--&gt;\n  Expression = ExpressionName\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/Postfix.sdf3/#modal-h2","title":"Postfix.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/PrimaryExpressions.sdf3/","title":"<code>PrimaryExpressions.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/PrimaryExpressions.sdf3</p> <pre><code>module java/expressions/PrimaryExpressions\n\n// 15.8. Primary Expressions\n\nimports\n  java/literals/Main\n  java/names/Names\n  java/types/PrimitiveTypes\n\ncontext-free sorts\n\n  ClassLiteral\n  Dims\n\ncontext-free syntax\n\n  Expression = Literal\n  Expression = ClassLiteral\n  Expression.This = \"this\"\n  Expression.QThis = &lt;&lt;TypeName&gt;.this&gt;\n  Expression = &lt;(&lt;Expression&gt;)&gt; {bracket}\n\n  ClassLiteral.TypeNameClassLiteral    = &lt;&lt;TypeName&gt;&lt;Dims*&gt;.class&gt;\n  ClassLiteral.NumericTypeClassLiteral = &lt;&lt;NumericType&gt;&lt;Dims*&gt;.class&gt;\n  ClassLiteral.BooleanClassLiteral     = &lt;boolean&lt;Dims*&gt;.class&gt;\n  ClassLiteral.VoidClassLiteral        = &lt;void.class&gt;\n\n  Dims.Dimension = &lt;[]&gt;\n\ntemplate options\n\n  tokenize : \".[\"\n\n\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/PrimaryExpressions.sdf3/#modal-h2","title":"PrimaryExpressions.sdf3","text":""},{"location":"lang.java/syntax/java/expressions/UnaryOperators.sdf3/","title":"<code>UnaryOperators.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/expressions/UnaryOperators.sdf3</p> <pre><code>module java/expressions/UnaryOperators\n\n// 15.15. Unary Operators\n\nimports\n  java/types/PrimitiveTypes\n  java/types/ReferenceTypes\n  java/expressions/LambdaExpressions \n\ncontext-free sorts\n\n  AdditionalBound\n\ncontext-free syntax\n\n  Expression.Plus  = &lt;+&lt;Expression&gt;&gt;\n  Expression.Minus = &lt;-&lt;Expression&gt;&gt;\n  Expression.PreIncr = &lt;++&lt;Expression&gt;&gt;\n  Expression.PreDecr = &lt;--&lt;Expression&gt;&gt;\n  Expression.Complement = &lt;~&lt;Expression&gt;&gt;\n  Expression.Not        = &lt;!&lt;Expression&gt;&gt;\n  Expression.CastPrimitive = &lt;(&lt;PrimitiveType&gt;) &lt;Expression&gt;&gt;\n  Expression.CastReference = &lt;(&lt;ReferenceType&gt; &lt;{AdditionalBound \" \"}*&gt;) &lt;Expression&gt;&gt;\n  AdditionalBound.AdditionalBound = &lt;&amp; &lt;ClassType&gt;&gt;\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/expressions/UnaryOperators.sdf3/#modal-h2","title":"UnaryOperators.sdf3","text":""},{"location":"lang.java/syntax/java/interfaces/AnnotationTypes.sdf3/","title":"<code>AnnotationTypes.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/interfaces/AnnotationTypes.sdf3</p> <pre><code>module java/interfaces/AnnotationTypes\n\n// 9.6. Annotation Types\n\nimports\n  java/interfaces/InterfaceDeclarations\n  java/lexical/Identifiers\n  java/lexical/Modifiers\n  java/lexical/SemiColon\n  java/types/ReferenceTypes\n  java/classes/FieldDeclarations\n  java/interfaces/ConstantDeclarations\n  java/classes/ClassDeclarations\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  AnnotationTypeDeclaration\n  AnnotationTypeMemberDeclaration\n  AnnotationTypeElementDeclaration\n  AnnotationTypeElementModifier\n  DefaultValue\n\ncontext-free syntax\n\n  AnnotationTypeDeclaration.AnnoDec = &lt;\n  &lt;{InterfaceModifier \" \"}*&gt; @interface &lt;Id&gt; {\n    &lt;{AnnotationTypeMemberDeclaration \"\\n\"}*&gt;\n  }&gt;\n\n  AnnotationTypeMemberDeclaration = AnnotationTypeElementDeclaration\n  AnnotationTypeMemberDeclaration = ConstantDeclaration\n  AnnotationTypeMemberDeclaration = ClassDeclaration\n  AnnotationTypeMemberDeclaration = InterfaceDeclaration\n  AnnotationTypeMemberDeclaration = SemiColon\n\n  AnnotationTypeElementDeclaration.AnnotationTypeElementDecl = &lt;\n  &lt;{AnnotationTypeElementModifier \" \"}*&gt; &lt;UnannType&gt; &lt;Id&gt;() &lt;AnnotatedDimsEmpty&gt; &lt;DefaultValue?&gt;;&gt;\n\n  AnnotationTypeElementModifier = Annotation\n  AnnotationTypeElementModifier = Public\n  AnnotationTypeElementModifier = Abstract\n\n  DefaultValue.DefaultVal = &lt;default &lt;ElementValue&gt;&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/interfaces/AnnotationTypes.sdf3/#modal-h2","title":"AnnotationTypes.sdf3","text":""},{"location":"lang.java/syntax/java/interfaces/Annotations.sdf3/","title":"<code>Annotations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/interfaces/Annotations.sdf3</p> <pre><code>module java/interfaces/Annotations\n\n// 9.7. Annotations\n\nimports\n  java/names/Names\n  java/lexical/Identifiers\n  java/expressions/Main\n\ncontext-free sorts\n\n  Annotation\n  ElementValuePair\n  ElementValue\n  ElementValueArrayInitializer\n\ncontext-free syntax\n\n  Annotation.Anno = &lt;@&lt;TypeName&gt;(&lt;{ElementValuePair \", \"}*&gt;)&gt;\n  Annotation.MarkerAnno = &lt;@&lt;TypeName&gt;&gt;\n  Annotation.SingleElemAnno = &lt;@&lt;TypeName&gt;(&lt;ElementValue&gt;)&gt;\n\n  ElementValuePair.ElemValPair = &lt;&lt;Id&gt; = &lt;ElementValue&gt;&gt;\n  ElementValue = Expression  \n  ElementValue = ElementValueArrayInitializer\n  ElementValue = Annotation\n\n  ElementValueArrayInitializer.ElementValArrayInit = &lt;{&lt;{ElementValue \",\"}*&gt;}&gt;\n  ElementValueArrayInitializer.ElementValArrayInitComma = &lt;{&lt;{ElementValue \",\"}*&gt;, }&gt;\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/interfaces/Annotations.sdf3/#modal-h2","title":"Annotations.sdf3","text":""},{"location":"lang.java/syntax/java/interfaces/ConstantDeclarations.sdf3/","title":"<code>ConstantDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/interfaces/ConstantDeclarations.sdf3</p> <pre><code>module java/interfaces/ConstantDeclarations\n\n// 9.3. Field (Constant) Declarations\n\nimports\n  java/lexical/Modifiers\n  java/classes/FieldDeclarations\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  ConstantDeclaration\n  ConstantModifier\n\ncontext-free syntax\n\n  ConstantDeclaration.ConstantDecl = &lt;\n  &lt;{ConstantModifier \" \"}*&gt; &lt;UnannType&gt; &lt;{VarDecl \", \"}+&gt;&gt;\n\n  ConstantModifier = Annotation\n  ConstantModifier = Public\n  ConstantModifier = Static\n  ConstantModifier = Final\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/interfaces/ConstantDeclarations.sdf3/#modal-h2","title":"ConstantDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/interfaces/InterfaceDeclarations.sdf3/","title":"<code>InterfaceDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/interfaces/InterfaceDeclarations.sdf3</p> <pre><code>module java/interfaces/InterfaceDeclarations\n\n// 9.1. Interface Declarations\n\nimports\n  java/lexical/Identifiers\n  java/lexical/Modifiers\n  java/lexical/SemiColon\n  java/classes/ClassDeclarations\n  java/types/ReferenceTypes\n  java/interfaces/Annotations\n  java/interfaces/ConstantDeclarations\n  java/interfaces/InterfaceMethodDeclarations\n  java/interfaces/AnnotationTypes\n\ncontext-free sorts\n\n  InterfaceDeclaration\n  InterfaceModifier\n  ExtendsInterfaces\n  InterfaceMemberDeclaration\n\ncontext-free syntax\n\n\n  InterfaceDeclaration.NormalInterface = &lt;\n  &lt;{InterfaceModifier \" \"}*&gt; interface &lt;Id&gt;&lt;TypeParameters?&gt; &lt;ExtendsInterfaces?&gt; {\n    &lt;{InterfaceMemberDeclaration \"\\n\"}*&gt;\n  }&gt;\n\n  InterfaceDeclaration = AnnotationTypeDeclaration\n\n  InterfaceModifier = Annotation\n  InterfaceModifier = Public\n  InterfaceModifier = Protected\n  InterfaceModifier = Private\n  InterfaceModifier = Abstract\n  InterfaceModifier = Static\n  InterfaceModifier = Strictfp\n\n  ExtendsInterfaces.ExtendsInterfaces = &lt;extends &lt;{ClassType \", \"}+&gt;&gt;\n\n  InterfaceMemberDeclaration = ConstantDeclaration\n  InterfaceMemberDeclaration = InterfaceMethodDeclaration\n  InterfaceMemberDeclaration = ClassDeclaration\n  InterfaceMemberDeclaration = InterfaceDeclaration\n  InterfaceMemberDeclaration = SemiColon\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/interfaces/InterfaceDeclarations.sdf3/#modal-h2","title":"InterfaceDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/interfaces/InterfaceMethodDeclarations.sdf3/","title":"<code>InterfaceMethodDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/interfaces/InterfaceMethodDeclarations.sdf3</p> <pre><code>module java/interfaces/InterfaceMethodDeclarations\n\n// 9.4. Method Declarations\n\nimports\n  java/lexical/Modifiers\n  java/classes/MethodDeclarations\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  InterfaceMethodDeclaration\n  InterfaceMethodModifier \n\ncontext-free syntax\n\n  InterfaceMethodDeclaration.AbstractMethodDec = &lt;\n  &lt;{InterfaceMethodModifier \" \"}*&gt; &lt;MethodHeader&gt; &lt;MethodBody&gt;&gt;\n\n  InterfaceMethodModifier = Annotation\n  InterfaceMethodModifier = Public\n  InterfaceMethodModifier = Abstract\n  InterfaceMethodModifier = Default\n  InterfaceMethodModifier = Static\n  InterfaceMethodModifier = Strictfp\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/interfaces/InterfaceMethodDeclarations.sdf3/#modal-h2","title":"InterfaceMethodDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/interfaces/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/interfaces/Main.sdf3</p> <pre><code>module java/interfaces/Main\n\n// Chapter 9. Interfaces\n\nimports\n  java/interfaces/InterfaceDeclarations\n  java/interfaces/InterfaceMethodDeclarations\n  java/interfaces/AnnotationTypes\n  java/interfaces/Annotations\n  java/interfaces/ConstantDeclarations\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/interfaces/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/Comments.sdf3/","title":"<code>Comments.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/Comments.sdf3</p> <pre><code>module java/lexical/Comments\n\n// 3.7. Comments\n\nimports\n\n  java/lexical/LineTerminators\n\nlexical start-symbols\n\n  Comment\n\nlexical syntax\n\n  LAYOUT = Comment\n  Comment = \"//\" EOLCommentChars LineTerminator\n  EOLCommentChars = ~[\\n\\r]*\n  Comment = \"/*\" CommentPart* \"*/\"\n  Comment = \"/**\" CommentPart* \"*/\"\n  Comment = \"/**/\"\n  CommentPart = BlockCommentChars\n  CommentPart = EscChar\n  CommentPart = EscEscChar\n  CommentPart = Asterisk\n  CommentPart = UnicodeEscape\n  BlockCommentChars = ~[\\*\\\\]+\n  Asterisk = \"*\"\n  EscEscChar = \"\\\\\\\\\"\n  EscChar = \"\\\\\"\n  UnicodeEscape = \"\\\\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]\n\nlexical restrictions\n\n  \"/**\" -/- [\\/]\n  \"/*\" -/- [\\*]\n  Asterisk -/- [\\/]\n  EscChar -/- [\\\\u]\n  BlockCommentChars -/- ~[\\*\\\\]\n  EOLCommentChars -/- ~[\\n\\13]\n\ncontext-free restrictions\n\n  LAYOUT? -/- [\\/].[\\*]\n  LAYOUT? -/- [\\/].[\\/]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/Comments.sdf3/#modal-h2","title":"Comments.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/Identifiers.sdf3/","title":"<code>Identifiers.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/Identifiers.sdf3</p> <pre><code>module java/lexical/Identifiers\n\n// 3.8. Identifiers\n\nimports\n\n  java/lexical/Keywords\n\nlexical start-symbols\n\n  ID\n\ncontext-free sorts\n\n  Id\n\nlexical sorts\n\n  ID\n\ncontext-free syntax\n\n  Id.Id = ID\n\nlexical syntax\n\n  ID = [A-Za-z\\_\\$] [A-Za-z0-9\\_\\$]*\n  ID = Keyword {reject}\n  ID = \"true\" {reject}\n  ID = \"false\" {reject}\n  ID = \"null\" {reject}\n\nlexical restrictions\n\n  ID -/- [a-zA-Z0-9\\_\\$]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/Identifiers.sdf3/#modal-h2","title":"Identifiers.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/Keywords.sdf3/","title":"<code>Keywords.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/Keywords.sdf3</p> <pre><code>module java/lexical/Keywords\n\n// 3.9. Keywords\n\nlexical syntax\n\n  Keyword = \"abstract\"\n  Keyword = \"assert\"\n  Keyword = \"boolean\"\n  Keyword = \"break\"\n  Keyword = \"byte\"\n  Keyword = \"case\"\n  Keyword = \"catch\"\n  Keyword = \"char\"\n  Keyword = \"class\"\n  Keyword = \"const\"\n  Keyword = \"continue\"\n  Keyword = \"default\"\n  Keyword = \"do\"\n  Keyword = \"double\"\n  Keyword = \"else\"\n  Keyword = \"enum\"\n  Keyword = \"extends\"\n  Keyword = \"final\"\n  Keyword = \"finally\"\n  Keyword = \"float\"\n  Keyword = \"for\"\n  Keyword = \"goto\"\n  Keyword = \"if\"\n  Keyword = \"implements\"\n  Keyword = \"import\"\n  Keyword = \"instanceof\"\n  Keyword = \"int\"\n  Keyword = \"interface\"\n  Keyword = \"long\"\n  Keyword = \"native\"\n  Keyword = \"new\"\n  Keyword = \"package\"\n  Keyword = \"private\"\n  Keyword = \"protected\"\n  Keyword = \"public\"\n  Keyword = \"return\"\n  Keyword = \"short\"\n  Keyword = \"static\"\n  Keyword = \"strictfp\"\n  Keyword = \"super\"\n  Keyword = \"switch\"\n  Keyword = \"synchronized\"\n  Keyword = \"this\"\n  Keyword = \"throw\"\n  Keyword = \"throws\"\n  Keyword = \"transient\"\n  Keyword = \"try\"\n  Keyword = \"void\"\n  Keyword = \"volatile\"\n  Keyword = \"while\"\n\nlexical restrictions\n\n  \"abstract\"\n  \"assert\"\n  \"boolean\"\n  \"break\"\n  \"byte\"\n  \"case\"\n  \"catch\"\n  \"char\"\n  \"class\"\n  \"const\"\n  \"continue\"\n  \"default\"\n  \"do\"\n  \"double\"\n  \"else\"\n  \"enum\"\n  \"extends\"\n  \"final\"\n  \"finally\"\n  \"float\"\n  \"for\"\n  \"goto\"\n  \"if\"\n  \"implements\"\n  \"import\"\n  \"instanceof\"\n  \"int\"\n  \"interface\"\n  \"long\"\n  \"native\"\n  \"new\"\n  \"package\"\n  \"private\"\n  \"protected\"\n  \"public\"\n  \"return\"\n  \"short\"\n  \"static\"\n  \"strictfp\"\n  \"super\"\n  \"switch\"\n  \"synchronized\"\n  \"this\"\n  \"throw\"\n  \"throws\"\n  \"transient\"\n  \"try\"\n  \"void\"\n  \"volatile\"\n  \"while\" -/- [A-Za-z0-9\\_\\$]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/Keywords.sdf3/#modal-h2","title":"Keywords.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/LineTerminators.sdf3/","title":"<code>LineTerminators.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/LineTerminators.sdf3</p> <pre><code>module java/lexical/LineTerminators\n\n// 3.4. Line Terminators\n\nlexical syntax\n\n  LineTerminator = [\\n]\n  LineTerminator = [\\r] [\\n]\n  LineTerminator = CarriageReturn\n  LineTerminator = EndOfFile\n  CarriageReturn = [\\r]\n\nlexical restrictions\n\n  CarriageReturn -/- [\\n]\n\nlexical syntax\n\n  EndOfFile =\n\nlexical restrictions\n\n  EndOfFile -/- ~[]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/LineTerminators.sdf3/#modal-h2","title":"LineTerminators.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/Main.sdf3</p> <pre><code>module java/lexical/Main\n\n// Chapter 3. Lexical Structure\n\nimports\n  java/lexical/Comments\n  java/lexical/Identifiers\n  java/lexical/Keywords\n  java/lexical/LineTerminators\n  java/lexical/Modifiers\n  java/lexical/UnicodeEscapes\n  java/lexical/WhiteSpace\n\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/Modifiers.sdf3/","title":"<code>Modifiers.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/Modifiers.sdf3</p> <pre><code>module java/lexical/Modifiers\n\n//  modifier keywards get their own productions,\n//  to prevent duplicate constructors\n\ncontext-free sorts\n\n  Abstract\n  Default\n  Final\n  Native\n  Private\n  Protected\n  Public\n  Static\n  Strictfp\n  Synchronized\n  Transient\n  Volatile\n\ncontext-free syntax\n\n  Abstract    .Abstract     = \"abstract\"\n  Default     .Default      = \"default\"\n  Final       .Final        = \"final\"\n  Native      .Native       = \"native\"\n  Private     .Private      = \"private\"\n  Protected   .Protected    = \"protected\"\n  Public      .Public       = \"public\"\n  Static      .Static       = \"static\"\n  Strictfp    .Strictfp     = \"strictfp\"\n  Transient   .Transient    = \"transient\"\n  Volatile    .Volatile     = \"volatile\"\n  Synchronized.Synchronized = \"synchronized\"\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/Modifiers.sdf3/#modal-h2","title":"Modifiers.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/SemiColon.sdf3/","title":"<code>SemiColon.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/SemiColon.sdf3</p> <pre><code>module java/lexical/SemiColon\n\n//  semi colon get its own productions,\n//  to prevent duplicate constructors\n\ncontext-free sorts\n\n  SemiColon\n\ncontext-free syntax\n\n  SemiColon.SemiColon = &lt;;&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/SemiColon.sdf3/#modal-h2","title":"SemiColon.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/UnicodeEscapes.sdf3/","title":"<code>UnicodeEscapes.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/UnicodeEscapes.sdf3</p> <pre><code>module java/lexical/UnicodeEscapes\n\n// 3.3. Unicode Escapes\n\nsyntax\n\n  UnicodeEscape.UnicodeEscape = \"\\\\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/UnicodeEscapes.sdf3/#modal-h2","title":"UnicodeEscapes.sdf3","text":""},{"location":"lang.java/syntax/java/lexical/WhiteSpace.sdf3/","title":"<code>WhiteSpace.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/lexical/WhiteSpace.sdf3</p> <pre><code>module java/lexical/WhiteSpace\n\n// 3.6. White Space\n\nlexical syntax\n\n  LAYOUT = [\\ \\t\\12\\r\\n]\n\ncontext-free restrictions\n\n  LAYOUT? -/- [\\ \\t\\12\\n\\r]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/lexical/WhiteSpace.sdf3/#modal-h2","title":"WhiteSpace.sdf3","text":""},{"location":"lang.java/syntax/java/literals/BooleanLiterals.sdf3/","title":"<code>BooleanLiterals.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/BooleanLiterals.sdf3</p> <pre><code>module java/literals/BooleanLiterals\n\n// 3.10.3. Boolean Literals\n\ncontext-free start-symbols\n\n  BoolLiteral\n\ncontext-free sorts\n\n  BoolLiteral\n\ncontext-free syntax\n\n  BoolLiteral.True = &lt;true&gt;\n  BoolLiteral.False = &lt;false&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/BooleanLiterals.sdf3/#modal-h2","title":"BooleanLiterals.sdf3","text":""},{"location":"lang.java/syntax/java/literals/CharacterLiterals.sdf3/","title":"<code>CharacterLiterals.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/CharacterLiterals.sdf3</p> <pre><code>module java/literals/CharacterLiterals\n\n// 3.10.4. Character Literals\n\nimports\n  java/literals/EscapeSequences\n  java/lexical/UnicodeEscapes\n\ncontext-free start-symbols\n\n  CharacterLiteral  \n\ncontext-free sorts\n\n  CharacterLiteral  \n\ncontext-free syntax\n\n  CharacterLiteral.CharLiteral = CharLiteral  \n\nlexical sorts\n\n  CharLiteral  \n\nlexical syntax\n\n  CharLiteral = \"'\" ~[\\n\\r\\'\\\\] \"'\"\n  CharLiteral = \"'\" EscapeSeq \"'\"\n  CharLiteral = \"'\" UnicodeEscape \"'\"\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/CharacterLiterals.sdf3/#modal-h2","title":"CharacterLiterals.sdf3","text":""},{"location":"lang.java/syntax/java/literals/EscapeSequences.sdf3/","title":"<code>EscapeSequences.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/EscapeSequences.sdf3</p> <pre><code>module java/literals/EscapeSequences\n\n// 3.10.6. Escape Sequences for Character and String Literals\n\nlexical syntax\n\n  EscapeSeq.NamedEscape = \"\\\\\" [btnfr\\\"\\'\\\\]\n  EscapeSeq = OctalEscape\n  OctalEscape.OctalEscape1 = \"\\\\\" LastOcta\n  OctalEscape.OctalEscape2 = \"\\\\\" [0-3] LastOcta\n  OctalEscape.OctalEscape2 = \"\\\\\" [4-7] [0-7]\n  OctalEscape.OctalEscape3 = \"\\\\\" [0-3] [0-7] [0-7]\n  LastOcta = [0-7]\n\nlexical restrictions\n\n  LastOcta -/- [0-7]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/EscapeSequences.sdf3/#modal-h2","title":"EscapeSequences.sdf3","text":""},{"location":"lang.java/syntax/java/literals/FloatingPointLiterals.sdf3/","title":"<code>FloatingPointLiterals.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/FloatingPointLiterals.sdf3</p> <pre><code>module java/literals/FloatingPointLiterals\n\n// 3.10.2. Floating-Point Literals\n\ncontext-free start-symbols\n\n  FloatLiteral\n\ncontext-free sorts\n\n  FloatLiteral\n\ncontext-free syntax\n\n  FloatLiteral.DeciFloat = DeciFloatLiteral\n  FloatLiteral.HexaFloat = HexaFloatLiteral\n  FloatLiteral.DeciDouble = DeciDoubleLiteral\n  FloatLiteral.HexaDouble = HexaDoubleLiteral\n\nlexical sorts\n\n  DeciFloatLiteral\n  HexaFloatLiteral\n  DeciDoubleLiteral\n  HexaDoubleLiteral\n\nlexical syntax\n\n  DeciFloatLiteral = Digits \".\" Digits? DeciFloatExponentPart? [fF]\n  DeciFloatLiteral = \".\" Digits DeciFloatExponentPart? [fF]\n  DeciFloatLiteral = Digits DeciFloatExponentPart [fF]\n  DeciFloatLiteral = Digits [fF]\n\n  DeciDoubleLiteral = Digits \".\" Digits? DeciFloatExponentPart? [dD]?\n  DeciDoubleLiteral = \".\" Digits DeciFloatExponentPart? [dD]?\n  DeciDoubleLiteral = Digits DeciFloatExponentPart [dD]?\n  DeciDoubleLiteral = Digits [dD]\n\n  DeciFloatExponentPart = [eE] SignedInteger\n  SignedInteger = [\\+\\-]? Digits\n\n  Digits = Digit\n  Digits = Digit DigitsAndUnderscores? Digit\n  Digit = [0]\n  Digit = [1-9]\n  DigitsAndUnderscores = DigitsOrUnderscore+\n  DigitsOrUnderscore = (Digit | [\\_])\n  Underscores = [\\_]+\n\n\nlexical restrictions\n\n  DeciFloatLiteral -/- [fF]\n  DeciDoubleLiteral -/- [dD]\n  SignedInteger -/- [0-9]\n\nlexical syntax\n\n  HexaFloatLiteral = HexaSignificand BinaryExponent [fF]\n  HexaDoubleLiteral = HexaSignificand BinaryExponent [dD]?\n  HexaSignificand = [0] [xX] [0-9a-fA-F\\_]* [0-9a-fA-F] \".\"?  \n  HexaSignificand = [0] [xX] [0-9a-fA-F\\_]* [0-9a-fA-F] \".\" [0-9a-fA-F\\_]* [0-9a-fA-F]\n  BinaryExponent = [pP] SignedInteger\n\nlexical restrictions\n\n  HexaSignificand -/- [0-9a-fA-F\\.]\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/FloatingPointLiterals.sdf3/#modal-h2","title":"FloatingPointLiterals.sdf3","text":""},{"location":"lang.java/syntax/java/literals/IntegerLiterals.sdf3/","title":"<code>IntegerLiterals.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/IntegerLiterals.sdf3</p> <pre><code>module java/literals/IntegerLiterals\n\n// 3.10.1. Integer Literals\n\ncontext-free start-symbols\n\n  IntLiteral\n\ncontext-free sorts\n\n  IntLiteral\n\ncontext-free syntax\n\n  IntLiteral.Deci = DeciLiteral {prefer}\n  IntLiteral.Hexa = HexaLiteral {prefer}\n  IntLiteral.Octa = OctaLiteral {prefer}\n  IntLiteral.Bin  = BinLiteral  {prefer}\n\nlexical sorts\n\n  DeciLiteral\n  HexaLiteral\n  OctaLiteral\n  BinLiteral\n\nlexical syntax\n\n  DeciLiteral = DeciNumeral [lL]?\n  HexaLiteral = HexaNumeral [lL]?\n  OctaLiteral = OctaNumeral [lL]?\n  BinLiteral  = BinNumeral  [lL]?\n  DeciNumeral = \"0\"\n  DeciNumeral = [1-9] [0-9\\_]* [0-9]\n  DeciNumeral = [1-9]\n  HexaNumeral = [0] [xX] [0-9a-fA-F\\_]* [0-9a-fA-F]\n  OctaNumeral = [0] [\\_0-7]* [0-7]\n  BinNumeral  = \"0\" [bB] BinDigits\n  BinDigits   = [01]\n  BinDigits   = [01] [01\\_]* [01]\n\nlexical restrictions\n\n  DeciNumeral -/- [0-9\\.fFdD]\n  HexaNumeral -/- [0-9a-fA-F]\n  OctaNumeral -/- [0-7]\n  BinNumeral  -/- [01]\n  DeciLiteral -/- [lL]\n  HexaLiteral -/- [lL]\n  OctaLiteral -/- [lL]\n  BinLiteral  -/- [lL]  \n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/IntegerLiterals.sdf3/#modal-h2","title":"IntegerLiterals.sdf3","text":""},{"location":"lang.java/syntax/java/literals/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/Main.sdf3</p> <pre><code>module java/literals/Main\n\n// 3.10. Literals\n\nimports\n  java/literals/IntegerLiterals\n  java/literals/FloatingPointLiterals\n  java/literals/BooleanLiterals\n  java/literals/CharacterLiterals\n  java/literals/StringLiterals\n  java/literals/NullLiteral\n\ncontext-free sorts\n\n  Literal\n\ncontext-free syntax\n\n  Literal = IntLiteral\n  Literal = FloatLiteral\n  Literal = BoolLiteral\n  Literal = CharacterLiteral\n  Literal = StringLiteral\n  Literal = NullLiteral\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/literals/NullLiteral.sdf3/","title":"<code>NullLiteral.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/NullLiteral.sdf3</p> <pre><code>module java/literals/NullLiteral\n\n// 3.10.7. The Null Literal\n\ncontext-free start-symbols\n\n  NullLiteral\n\ncontext-free sorts\n\n  NullLiteral\n\ncontext-free syntax\n\n  NullLiteral.Null = &lt;null&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/NullLiteral.sdf3/#modal-h2","title":"NullLiteral.sdf3","text":""},{"location":"lang.java/syntax/java/literals/StringLiterals.sdf3/","title":"<code>StringLiterals.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/literals/StringLiterals.sdf3</p> <pre><code>module java/literals/StringLiterals\n\n// 3.10.5. String Literals\n\nimports\n  java/literals/EscapeSequences\n  java/lexical/UnicodeEscapes\n\ncontext-free start-symbols\n\n  StringLiteral\n\ncontext-free sorts\n\n  StringLiteral\n\ncontext-free syntax\n\n  StringLiteral.StringLiteral = StringLit  \n\nlexical sorts\n\n  StringLit\n\nlexical syntax\n\n  StringLit = \"\\\"\" StringPart* \"\\\"\"\n  StringPart = UnicodeEscape\n  StringPart = EscapeSeq\n  StringPart = StringChars\n  StringChars = ~[\\\"\\\\\\n\\r]+\n\nlexical restrictions\n\n  StringChars -/- ~[\\\"\\\\\\n\\r]\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/literals/StringLiterals.sdf3/#modal-h2","title":"StringLiterals.sdf3","text":""},{"location":"lang.java/syntax/java/names/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/names/Main.sdf3</p> <pre><code>module java/names/Main\n\n// Chapter 6. Names\n\nimports \n\n  java/names/Names\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/names/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/names/Names.sdf3/","title":"<code>Names.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/names/Names.sdf3</p> <pre><code>module java/names/Names\n\n// 6.5. Determining the Meaning of a Name\n\nimports \n  java/lexical/Identifiers\n\ncontext-free sorts\n\n  PackageName\n  TypeName\n  PackageOrTypeName\n  ExpressionName\n  AmbiguousName\n  MethodName\n\ncontext-free syntax\n\n  PackageName.PackageName             = Id\n  PackageName.PackageName             = &lt;&lt;PackageName&gt;.&lt;Id&gt;&gt;\n  TypeName.TypeName                   = Id\n  TypeName.TypeName                   = &lt;&lt;PackageOrTypeName&gt;.&lt;Id&gt;&gt;\n  PackageOrTypeName.PackageOrTypeName = Id\n  PackageOrTypeName.PackageOrTypeName = &lt;&lt;PackageOrTypeName&gt;.&lt;Id&gt;&gt;\n  ExpressionName.ExpressionName       = Id\n  ExpressionName.ExpressionName       = &lt;&lt;AmbiguousName&gt;.&lt;Id&gt;&gt;\n  AmbiguousName.AmbiguousName         = Id\n  AmbiguousName.AmbiguousName         = &lt;&lt;AmbiguousName&gt;.&lt;Id&gt;&gt;\n  MethodName.MethodName               = Id\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/names/Names.sdf3/#modal-h2","title":"Names.sdf3","text":""},{"location":"lang.java/syntax/java/packages/CompilationUnits.sdf3/","title":"<code>CompilationUnits.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/packages/CompilationUnits.sdf3</p> <pre><code>module java/packages/CompilationUnits\n\n// 7.3. Compilation Units\n\nimports \n  java/packages/PackageDeclarations\n  java/packages/ImportDeclarations\n  java/packages/TypeDeclarations\n\ncontext-free sorts\n\n  CompilationUnit\n\ncontext-free syntax\n\n\n  CompilationUnit.CompilationUnit = &lt;\n  &lt;PackageDeclaration?&gt;\n\n  &lt;{ImportDeclaration \"\\n\"}*&gt;\n\n  &lt;{TypeDeclaration \"\\n\"}*&gt;&gt; \n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/packages/CompilationUnits.sdf3/#modal-h2","title":"CompilationUnits.sdf3","text":""},{"location":"lang.java/syntax/java/packages/ImportDeclarations.sdf3/","title":"<code>ImportDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/packages/ImportDeclarations.sdf3</p> <pre><code>module java/packages/ImportDeclarations\n\n// 7.5. Import Declarations\n\nimports\n  java/names/Names\n  java/lexical/Identifiers\n\ncontext-free sorts\n\n  ImportDeclaration\n\ncontext-free syntax\n\n  ImportDeclaration.SingleTypeImport     = &lt;import &lt;TypeName&gt;;&gt;\n  ImportDeclaration.TypeImportOnDemand   = &lt;import &lt;PackageOrTypeName&gt;.*;&gt;\n  ImportDeclaration.SingleStaticImport   = &lt;import static &lt;TypeName&gt;.&lt;Id&gt;;&gt;\n  ImportDeclaration.StaticImportOnDemand = &lt;import static &lt;TypeName&gt;.*;&gt;  \n\ntemplate options\n  tokenize : \".;\" \n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/packages/ImportDeclarations.sdf3/#modal-h2","title":"ImportDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/packages/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/packages/Main.sdf3</p> <pre><code>module java/packages/Main\n\n// Chapter 7. Packages\n\nimports\n  java/packages/CompilationUnits\n  java/packages/ImportDeclarations\n  java/packages/PackageDeclarations\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/packages/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/packages/PackageDeclarations.sdf3/","title":"<code>PackageDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/packages/PackageDeclarations.sdf3</p> <pre><code>module java/packages/PackageDeclarations\n\n// 7.4. Package Declarations\n\nimports\n  java/lexical/Identifiers\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  PackageDeclaration\n\ncontext-free syntax\n\n  PackageDeclaration.PackageDeclaration = &lt;&lt;{Annotation \" \"}*&gt; package &lt;{Id \".\"}+&gt;;&gt;\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/packages/PackageDeclarations.sdf3/#modal-h2","title":"PackageDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/packages/TypeDeclarations.sdf3/","title":"<code>TypeDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/packages/TypeDeclarations.sdf3</p> <pre><code>module java/packages/TypeDeclarations\n\n// 7.6. Top Level Type Declarations\n\nimports\n  java/lexical/SemiColon\n  java/classes/ClassDeclarations\n  java/interfaces/InterfaceDeclarations\n\ncontext-free sorts\n\n  TypeDeclaration\n\ncontext-free syntax\n\n  TypeDeclaration = ClassDeclaration\n  TypeDeclaration = InterfaceDeclaration\n  TypeDeclaration = SemiColon\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/packages/TypeDeclarations.sdf3/#modal-h2","title":"TypeDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/statements/Blocks.sdf3/","title":"<code>Blocks.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/statements/Blocks.sdf3</p> <pre><code>module java/statements/Blocks\n\n// 14.2. Blocks\n\nimports\n  java/classes/ClassDeclarations\n  java/statements/LocalVariableDeclarations\n  java/statements/Statements\n\ncontext-free sorts\n\n  Block\n  BlockStatement\n\ncontext-free syntax\n\n  Block.Block = &lt;\n  {\n    &lt;{BlockStatement \"\\n\"}*&gt;\n  }&gt;\n  BlockStatement = LocalVariableDeclarationStatement\n  BlockStatement   = ClassDeclaration\n  BlockStatement    = Statement\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/statements/Blocks.sdf3/#modal-h2","title":"Blocks.sdf3","text":""},{"location":"lang.java/syntax/java/statements/LocalVariableDeclarations.sdf3/","title":"<code>LocalVariableDeclarations.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/statements/LocalVariableDeclarations.sdf3</p> <pre><code>module java/statements/LocalVariableDeclarations\n\n// 14.4. Local Variable Declaration Statements\n\nimports\n  java/classes/FieldDeclarations\n  java/classes/MethodDeclarations\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  LocalVariableDeclarationStatement\n  LocalVariableDeclaration\n\ncontext-free syntax\n\n  LocalVariableDeclarationStatement.LocVarDeclStm = &lt;&lt;LocalVariableDeclaration&gt;;&gt; //{prefer}\n  LocalVariableDeclaration.LocalVarDecl = &lt;\n  &lt;{VariableModifier \" \"}*&gt; &lt;UnannType&gt; &lt;{VarDecl \", \"}+&gt;&gt; {prefer}\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/statements/LocalVariableDeclarations.sdf3/#modal-h2","title":"LocalVariableDeclarations.sdf3","text":""},{"location":"lang.java/syntax/java/statements/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/statements/Main.sdf3</p> <pre><code>module java/statements/Main\n\n// Chapter 14. Blocks and Statements\n\nimports\n  java/statements/Blocks\n  java/statements/LocalVariableDeclarations\n  java/statements/Statements\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/statements/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/statements/Statements.sdf3/","title":"<code>Statements.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/statements/Statements.sdf3</p> <pre><code>module java/statements/Statements\n\n// 14.5. Statements\n\nimports\n  java/classes/FieldDeclarations\n  java/classes/MethodDeclarations\n  java/lexical/Identifiers\n  java/statements/Blocks\n  java/names/Names\n  java/types/ReferenceTypes\n  java/expressions/Main\n\ncontext-free sorts\n\n  Statement\n  ForInit\n  ForUpdate\n  Exprs\n  SwitchGroup\n  SwitchLabel\n  CatchClause\n  CatchFormalParameter\n  CatchType\n  CatchTypeRest\n  Resource\n\ncontext-free priorities\n\n  Statement.IfElse  &gt; Statement.If\n\ncontext-free syntax\n\n  Statement.Labeled = &lt;&lt;Id&gt; : &lt;Statement&gt;&gt;\n\n  Statement.If      = &lt;if(&lt;Expression&gt;) &lt;Statement&gt;&gt;\n  Statement.IfElse  = &lt;if(&lt;Expression&gt;) &lt;Statement&gt; else &lt;Statement&gt;&gt;\n\n  Statement.While = &lt;while(&lt;Expression&gt;) &lt;Statement&gt;&gt;\n\n  Statement.For     = &lt;for(&lt;ForInit&gt;; &lt;Expression?&gt;; &lt;ForUpdate&gt;) &lt;Statement&gt;&gt;\n  Statement.ForEach = &lt;for(&lt;{VariableModifier \" \"}*&gt; &lt;UnannType&gt; &lt;VarDeclId&gt; : &lt;Expression&gt;) &lt;Statement&gt;&gt;\n\n  ForInit = Exprs\n  ForInit.VarDecls = &lt;&lt;{VariableModifier \" \"}*&gt; &lt;UnannType&gt; &lt;{VarDecl \", \"}+&gt;&gt;\n\n  ForUpdate = Exprs\n\n  Exprs.ExprList =  &lt;&lt;{Expression \", \"}*&gt;&gt;\n\n  Statement = Block\n\n  Statement.Empty = \";\"\n\n  Statement.ExpressionStatement = &lt;&lt;Expression&gt;;&gt;\n\n  Statement = ExpressionName \"&lt;\" ExpressionName \"&gt;\" Expression \";\" {reject}\n  Statement = ExpressionName \"&lt;\" ExpressionName \"&lt;\" ExpressionName \"&gt;&gt;\" Expression \";\" {reject} \n  Statement = ExpressionName \"&lt;\" ExpressionName \"&lt;\" ExpressionName \"&lt;\" ExpressionName \"&gt;&gt;&gt;\" Expression \";\" {reject} \n\n  Statement.Assert = &lt;assert &lt;Expression&gt;;&gt;\n  Statement.Assert = &lt;assert &lt;Expression&gt; : &lt;Expression&gt;;&gt;\n\n  Statement.Switch = &lt;\n  switch(&lt;Expression&gt;) {\n    &lt;{SwitchGroup \"\\n\"}*&gt;\n    &lt;{SwitchLabel \"\\n\"}*&gt;\n  }&gt;\n\n  SwitchGroup.SwitchGroup = &lt;\n  &lt;{SwitchLabel \"\\n\"}+&gt;\n  &lt;{BlockStatement \"\\n\"}+&gt;\n  &gt;\n\n  SwitchLabel.CaseExpr     = &lt;case &lt;Expression&gt; :&gt;\n//  SwitchLabel.CaseEnumName = &lt;case &lt;Id&gt; :&gt;\n  SwitchLabel.DefaultCase  = &lt;default :&gt;\n\n  Statement.DoWhile = &lt;\n  do &lt;Statement&gt;\n  while(&lt;Expression&gt;);&gt;\n\n  Statement.Break = &lt;break;&gt;\n  Statement.Break = &lt;break &lt;Id&gt;;&gt;\n\n  Statement.Continue = &lt;continue;&gt;\n  Statement.Continue = &lt;continue &lt;Id&gt;;&gt;\n\n  Statement.Return = &lt;return;&gt;\n  Statement.Return = &lt;return &lt;Expression&gt;;&gt;\n\n  Statement.Synchronized = &lt;synchronized(&lt;Expression&gt;) &lt;Block&gt;&gt;\n\n  Statement.Throw = &lt;throw &lt;Expression&gt;;&gt;\n\n  Statement.Try = &lt;\n  try &lt;Block&gt;\n  &lt;{CatchClause \"\\n\"}+&gt;&gt;\n\n  Statement.TryFinally = &lt;\n  try &lt;Block&gt;\n  &lt;{CatchClause \"\\n\"}*&gt;\n  finally &lt;Block&gt;&gt;\n\n  CatchClause.Catch = &lt;catch(&lt;CatchFormalParameter&gt;) &lt;Block&gt;&gt;\n  CatchFormalParameter.CatchParam = &lt;&lt;{VariableModifier \" \"}*&gt; &lt;CatchType&gt; &lt;VarDeclId&gt;&gt;\n  CatchType.CatchType = &lt;&lt;UnannClassType&gt; &lt;{CatchTypeRest \" \"}*&gt;&gt;\n  CatchTypeRest.CatchTypeElem = &lt;| &lt;ClassType&gt;&gt;\n\n  Statement.TryWithResources = &lt;\n  try (&lt;{Resource \"; \"}*&gt;) &lt;Block&gt; \n  &lt;{CatchClause \"\\n\"}*&gt;&gt;\n\n  Statement.TryWithResourcesSemiColon = &lt;\n  try (&lt;{Resource \"; \"}*&gt;;) &lt;Block&gt; \n  &lt;{CatchClause \"\\n\"}*&gt;&gt;\n\n  Statement.TryWithResources = &lt;\n  try (&lt;{Resource \"; \"}*&gt;) &lt;Block&gt; \n  &lt;{CatchClause \"\\n\"}*&gt;\n  finally &lt;Block&gt;&gt;\n\n  Statement.TryWithResourcesSemiColon = &lt;\n  try (&lt;{Resource \"; \"}*&gt;;) &lt;Block&gt; \n  &lt;{CatchClause \"\\n\"}*&gt;\n  finally &lt;Block&gt;&gt;\n\n  Resource.Resource = &lt;&lt;{VariableModifier \" \"}*&gt; &lt;UnannType&gt; &lt;VarDeclId&gt; = &lt;Expression&gt;&gt;\n\ntemplate options\n  tokenize : \"(;\"\n\n// new SDF3 table generator\ncontext-free priorities\n\n  Statement.IfElse  &gt; Statement.If\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/statements/Statements.sdf3/#modal-h2","title":"Statements.sdf3","text":""},{"location":"lang.java/syntax/java/types/Main.sdf3/","title":"<code>Main.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/types/Main.sdf3</p> <pre><code>module java/types/Main\n\n// Chapter 4. Types, Values, and Variables\n\nimports\n  java/types/PrimitiveTypes\n  java/types/ReferenceTypes\n\ncontext-free start-symbols\n\n  Type\n\ncontext-free sorts\n\n  Type\n\ncontext-free syntax\n\n  Type = PrimitiveType\n  Type = ReferenceType\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/types/Main.sdf3/#modal-h2","title":"Main.sdf3","text":""},{"location":"lang.java/syntax/java/types/ParameterizedTypes.sdf3/","title":"<code>ParameterizedTypes.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/types/ParameterizedTypes.sdf3</p> <pre><code>module java/types/ParameterizedTypes\n\n// 4.5. Parameterized Types\n\nimports\n  java/types/ReferenceTypes\n  java/interfaces/Annotations \n\ncontext-free sorts\n\n  TypeArguments\n  TypeArgument\n  WildCard\n\ncontext-free syntax\n\n  TypeArguments.TypeArguments = [&lt;[{TypeArgument \", \"}+]&gt;]\n  TypeArgument = ReferenceType\n  TypeArgument = WildCard\n  WildCard.WildCard = &lt;&lt;{Annotation \" \"}*&gt; ?&gt;\n  WildCard.WildCardExtends = &lt;&lt;{Annotation \" \"}*&gt; ? extends &lt;ReferenceType&gt;&gt;\n  WildCard.WildCardSuper = &lt;&lt;{Annotation \" \"}*&gt; ? super &lt;ReferenceType&gt;&gt;\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/types/ParameterizedTypes.sdf3/#modal-h2","title":"ParameterizedTypes.sdf3","text":""},{"location":"lang.java/syntax/java/types/PrimitiveTypes.sdf3/","title":"<code>PrimitiveTypes.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/types/PrimitiveTypes.sdf3</p> <pre><code>module java/types/PrimitiveTypes\n\n// 4.2. Primitive Types and Values\n\nimports\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  PrimitiveType\n  NumericType\n\ncontext-free syntax\n\n  PrimitiveType.NumericType = &lt;&lt;{Annotation \" \"}*&gt; &lt;NumericType&gt;&gt;\n  PrimitiveType.BooleanType = &lt;&lt;{Annotation \" \"}*&gt; boolean&gt;\n  NumericType.Byte   = &lt;byte&gt;\n  NumericType.Short  = &lt;short&gt;\n  NumericType.Int    = &lt;int&gt;\n  NumericType.Long   = &lt;long&gt;\n  NumericType.Char   = &lt;char&gt;\n  NumericType.Float  = &lt;float&gt;\n  NumericType.Double = &lt;double&gt;\n\n\n\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/types/PrimitiveTypes.sdf3/#modal-h2","title":"PrimitiveTypes.sdf3","text":""},{"location":"lang.java/syntax/java/types/ReferenceTypes.sdf3/","title":"<code>ReferenceTypes.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/types/ReferenceTypes.sdf3</p> <pre><code>module java/types/ReferenceTypes\n\n// 4.3. Reference Types and Values\n\nimports\n  java/lexical/Identifiers\n  java/types/PrimitiveTypes\n  java/types/ParameterizedTypes\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  ReferenceType\n  ClassType\n  TypeVariable\n  ArrayType\n  AnnotatedDims\n  AnnotatedDimsEmpty\n  AnnotatedDim\n\ncontext-free syntax\n\n  ReferenceType = ClassType\n  ReferenceType = ArrayType\n\n  ClassType.ClassType                  = &lt;&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&lt;TypeArguments?&gt;&gt;\n  ClassType.ClassOrInterfaceTypeMember = &lt;&lt;ClassType&gt;.&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&lt;TypeArguments?&gt;&gt;\n\n  // The interfaceTypeMember will be ambiguous with ClassTypeMember\n  // ClassType.InterfaceTypeMember = &lt;&lt;InterfaceType&gt;.&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&lt;TypeArguments?&gt;&gt;\n  // ReferenceType = InterfaceType  \n  // InterfaceType.InterfaceType   = ClassType\n\n  // Ambiguous with ClassType.ClassType\n  TypeVariable.TypeVar = &lt;&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&gt;\n\n  ArrayType.ArrayTypePrimitive = &lt;&lt;PrimitiveType&gt; &lt;AnnotatedDims&gt;&gt;\n  ArrayType.ArrayTypeClassType = &lt;&lt;ClassType&gt; &lt;AnnotatedDims&gt;&gt;\n  AnnotatedDims      = &lt;&lt;{AnnotatedDim \" \"}+&gt;&gt;\n  AnnotatedDimsEmpty = &lt;&lt;{AnnotatedDim \" \"}*&gt;&gt;\n  AnnotatedDim.AnnotateDim = &lt;&lt;{Annotation \" \"}*&gt; []&gt;\n\ntemplate options\n\n  tokenize : \"[\"\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/types/ReferenceTypes.sdf3/#modal-h2","title":"ReferenceTypes.sdf3","text":""},{"location":"lang.java/syntax/java/types/TypeVariable.sdf3/","title":"<code>TypeVariable.sdf3</code>","text":"<p> pdmosses/java-front/lang.java/syntax/java/types/TypeVariable.sdf3</p> <pre><code>module java/types/TypeVariable\n\n// 4.4. Type Variables\n\nimports\n  java/types/ReferenceTypes\n  java/lexical/Identifiers\n  java/interfaces/Annotations\n\ncontext-free sorts\n\n  TypeParameter\n\ncontext-free syntax\n\n  TypeParameter.TypeParameter        = &lt;&lt;{Annotation \" \"}*&gt; &lt;Id&gt;&gt;\n  TypeParameter.TypeParameterExtends = &lt;&lt;{Annotation \" \"}*&gt; &lt;Id&gt; extends &lt;{ClassType \"&amp; \"}+&gt;&gt;\n\n</code></pre> \u00d7"},{"location":"lang.java/syntax/java/types/TypeVariable.sdf3/#modal-h2","title":"TypeVariable.sdf3","text":""}]}